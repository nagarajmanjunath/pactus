// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0x8ededcb57f98aaf0

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0x8ededcb57f98aaf0, s.Struct)
	return str
}

func (s Header) Version() uint8 {
	return s.Struct.Uint8(0)
}

func (s Header) SetVersion(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Header) Time() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Header) SetTime(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s Header) PrevBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasPrevBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetPrevBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) StateRoot() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasStateRoot() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetStateRoot(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) SortitionSeed() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Header) HasSortitionSeed() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetSortitionSeed(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Header) ProposerAddress() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Header) HasProposerAddress() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) ProposerAddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Header) SetProposerAddress(v string) error {
	return s.Struct.SetText(3, v)
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0x8ededcb57f98aaf0, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

type Certificate struct{ capnp.Struct }

// Certificate_TypeID is the unique identifier for the type Certificate.
const Certificate_TypeID = 0xf94646af9560150b

func NewCertificate(s *capnp.Segment) (Certificate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Certificate{st}, err
}

func NewRootCertificate(s *capnp.Segment) (Certificate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Certificate{st}, err
}

func ReadRootCertificate(msg *capnp.Message) (Certificate, error) {
	root, err := msg.RootPtr()
	return Certificate{root.Struct()}, err
}

func (s Certificate) String() string {
	str, _ := text.Marshal(0xf94646af9560150b, s.Struct)
	return str
}

func (s Certificate) Round() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s Certificate) SetRound(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Certificate) Committers() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int32List{List: p.List()}, err
}

func (s Certificate) HasCommitters() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Certificate) SetCommitters(v capnp.Int32List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCommitters sets the committers field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Certificate) NewCommitters(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Certificate) Absentees() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Int32List{List: p.List()}, err
}

func (s Certificate) HasAbsentees() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Certificate) SetAbsentees(v capnp.Int32List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAbsentees sets the absentees field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Certificate) NewAbsentees(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Certificate) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Certificate) HasSignature() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Certificate) SetSignature(v []byte) error {
	return s.Struct.SetData(2, v)
}

// Certificate_List is a list of Certificate.
type Certificate_List struct{ capnp.List }

// NewCertificate creates a new list of Certificate.
func NewCertificate_List(s *capnp.Segment, sz int32) (Certificate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Certificate_List{l}, err
}

func (s Certificate_List) At(i int) Certificate { return Certificate{s.List.Struct(i)} }

func (s Certificate_List) Set(i int, v Certificate) error { return s.List.SetStruct(i, v.Struct) }

func (s Certificate_List) String() string {
	str, _ := text.MarshalList(0xf94646af9560150b, s.List)
	return str
}

// Certificate_Promise is a wrapper for a Certificate promised by a client call.
type Certificate_Promise struct{ *capnp.Pipeline }

func (p Certificate_Promise) Struct() (Certificate, error) {
	s, err := p.Pipeline.Struct()
	return Certificate{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xb8f393fd6f7f0c44

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xb8f393fd6f7f0c44, s.Struct)
	return str
}

func (s Block) Header() (Header, error) {
	p, err := s.Struct.Ptr(0)
	return Header{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetHeader(v Header) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Header struct, preferring placement in s's segment.
func (s Block) NewHeader() (Header, error) {
	ss, err := NewHeader(s.Struct.Segment())
	if err != nil {
		return Header{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) PrevCert() (Certificate, error) {
	p, err := s.Struct.Ptr(1)
	return Certificate{Struct: p.Struct()}, err
}

func (s Block) HasPrevCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Block) SetPrevCert(v Certificate) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPrevCert sets the prevCert field to a newly
// allocated Certificate struct, preferring placement in s's segment.
func (s Block) NewPrevCert() (Certificate, error) {
	ss, err := NewCertificate(s.Struct.Segment())
	if err != nil {
		return Certificate{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) Txs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.DataList{List: p.List()}, err
}

func (s Block) HasTxs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Block) SetTxs(v capnp.DataList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTxs sets the txs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Block) NewTxs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xb8f393fd6f7f0c44, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

func (p Block_Promise) Header() Header_Promise {
	return Header_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Block_Promise) PrevCert() Certificate_Promise {
	return Certificate_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type BlockchainInfoResult struct{ capnp.Struct }

// BlockchainInfoResult_TypeID is the unique identifier for the type BlockchainInfoResult.
const BlockchainInfoResult_TypeID = 0xae39f74773bfa089

func NewBlockchainInfoResult(s *capnp.Segment) (BlockchainInfoResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BlockchainInfoResult{st}, err
}

func NewRootBlockchainInfoResult(s *capnp.Segment) (BlockchainInfoResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BlockchainInfoResult{st}, err
}

func ReadRootBlockchainInfoResult(msg *capnp.Message) (BlockchainInfoResult, error) {
	root, err := msg.RootPtr()
	return BlockchainInfoResult{root.Struct()}, err
}

func (s BlockchainInfoResult) String() string {
	str, _ := text.Marshal(0xae39f74773bfa089, s.Struct)
	return str
}

func (s BlockchainInfoResult) LastBlockHeight() uint32 {
	return s.Struct.Uint32(0)
}

func (s BlockchainInfoResult) SetLastBlockHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BlockchainInfoResult) LastBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockchainInfoResult) HasLastBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockchainInfoResult) SetLastBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockchainInfoResult) Committee() (Committee, error) {
	p, err := s.Struct.Ptr(1)
	return Committee{Struct: p.Struct()}, err
}

func (s BlockchainInfoResult) HasCommittee() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockchainInfoResult) SetCommittee(v Committee) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewCommittee sets the committee field to a newly
// allocated Committee struct, preferring placement in s's segment.
func (s BlockchainInfoResult) NewCommittee() (Committee, error) {
	ss, err := NewCommittee(s.Struct.Segment())
	if err != nil {
		return Committee{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// BlockchainInfoResult_List is a list of BlockchainInfoResult.
type BlockchainInfoResult_List struct{ capnp.List }

// NewBlockchainInfoResult creates a new list of BlockchainInfoResult.
func NewBlockchainInfoResult_List(s *capnp.Segment, sz int32) (BlockchainInfoResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return BlockchainInfoResult_List{l}, err
}

func (s BlockchainInfoResult_List) At(i int) BlockchainInfoResult {
	return BlockchainInfoResult{s.List.Struct(i)}
}

func (s BlockchainInfoResult_List) Set(i int, v BlockchainInfoResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BlockchainInfoResult_List) String() string {
	str, _ := text.MarshalList(0xae39f74773bfa089, s.List)
	return str
}

// BlockchainInfoResult_Promise is a wrapper for a BlockchainInfoResult promised by a client call.
type BlockchainInfoResult_Promise struct{ *capnp.Pipeline }

func (p BlockchainInfoResult_Promise) Struct() (BlockchainInfoResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockchainInfoResult{s}, err
}

func (p BlockchainInfoResult_Promise) Committee() Committee_Promise {
	return Committee_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type BlockResult struct{ capnp.Struct }

// BlockResult_TypeID is the unique identifier for the type BlockResult.
const BlockResult_TypeID = 0x83143f06598cf9e8

func NewBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockResult{st}, err
}

func NewRootBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockResult{st}, err
}

func ReadRootBlockResult(msg *capnp.Message) (BlockResult, error) {
	root, err := msg.RootPtr()
	return BlockResult{root.Struct()}, err
}

func (s BlockResult) String() string {
	str, _ := text.Marshal(0x83143f06598cf9e8, s.Struct)
	return str
}

func (s BlockResult) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s BlockResult) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BlockResult) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockResult) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockResult) Block() (Block, error) {
	p, err := s.Struct.Ptr(1)
	return Block{Struct: p.Struct()}, err
}

func (s BlockResult) HasBlock() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetBlock(v Block) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockResult) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s BlockResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s BlockResult) HasData() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetData(v []byte) error {
	return s.Struct.SetData(2, v)
}

// BlockResult_List is a list of BlockResult.
type BlockResult_List struct{ capnp.List }

// NewBlockResult creates a new list of BlockResult.
func NewBlockResult_List(s *capnp.Segment, sz int32) (BlockResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return BlockResult_List{l}, err
}

func (s BlockResult_List) At(i int) BlockResult { return BlockResult{s.List.Struct(i)} }

func (s BlockResult_List) Set(i int, v BlockResult) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockResult_List) String() string {
	str, _ := text.MarshalList(0x83143f06598cf9e8, s.List)
	return str
}

// BlockResult_Promise is a wrapper for a BlockResult promised by a client call.
type BlockResult_Promise struct{ *capnp.Pipeline }

func (p BlockResult_Promise) Struct() (BlockResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockResult{s}, err
}

func (p BlockResult_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type TransactionResult struct{ capnp.Struct }

// TransactionResult_TypeID is the unique identifier for the type TransactionResult.
const TransactionResult_TypeID = 0xbd77371c14feb668

func NewTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TransactionResult{st}, err
}

func NewRootTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TransactionResult{st}, err
}

func ReadRootTransactionResult(msg *capnp.Message) (TransactionResult, error) {
	root, err := msg.RootPtr()
	return TransactionResult{root.Struct()}, err
}

func (s TransactionResult) String() string {
	str, _ := text.Marshal(0xbd77371c14feb668, s.Struct)
	return str
}

func (s TransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TransactionResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TransactionResult) Transaction() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasTransaction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetTransaction(v []byte) error {
	return s.Struct.SetData(2, v)
}

// TransactionResult_List is a list of TransactionResult.
type TransactionResult_List struct{ capnp.List }

// NewTransactionResult creates a new list of TransactionResult.
func NewTransactionResult_List(s *capnp.Segment, sz int32) (TransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return TransactionResult_List{l}, err
}

func (s TransactionResult_List) At(i int) TransactionResult {
	return TransactionResult{s.List.Struct(i)}
}

func (s TransactionResult_List) Set(i int, v TransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TransactionResult_List) String() string {
	str, _ := text.MarshalList(0xbd77371c14feb668, s.List)
	return str
}

// TransactionResult_Promise is a wrapper for a TransactionResult promised by a client call.
type TransactionResult_Promise struct{ *capnp.Pipeline }

func (p TransactionResult_Promise) Struct() (TransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return TransactionResult{s}, err
}

type AccountResult struct{ capnp.Struct }

// AccountResult_TypeID is the unique identifier for the type AccountResult.
const AccountResult_TypeID = 0xa3bd4ddc3e0a5017

func NewAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func NewRootAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func ReadRootAccountResult(msg *capnp.Message) (AccountResult, error) {
	root, err := msg.RootPtr()
	return AccountResult{root.Struct()}, err
}

func (s AccountResult) String() string {
	str, _ := text.Marshal(0xa3bd4ddc3e0a5017, s.Struct)
	return str
}

func (s AccountResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s AccountResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AccountResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// AccountResult_List is a list of AccountResult.
type AccountResult_List struct{ capnp.List }

// NewAccountResult creates a new list of AccountResult.
func NewAccountResult_List(s *capnp.Segment, sz int32) (AccountResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AccountResult_List{l}, err
}

func (s AccountResult_List) At(i int) AccountResult { return AccountResult{s.List.Struct(i)} }

func (s AccountResult_List) Set(i int, v AccountResult) error { return s.List.SetStruct(i, v.Struct) }

func (s AccountResult_List) String() string {
	str, _ := text.MarshalList(0xa3bd4ddc3e0a5017, s.List)
	return str
}

// AccountResult_Promise is a wrapper for a AccountResult promised by a client call.
type AccountResult_Promise struct{ *capnp.Pipeline }

func (p AccountResult_Promise) Struct() (AccountResult, error) {
	s, err := p.Pipeline.Struct()
	return AccountResult{s}, err
}

type ValidatorResult struct{ capnp.Struct }

// ValidatorResult_TypeID is the unique identifier for the type ValidatorResult.
const ValidatorResult_TypeID = 0xec1c828dae8bffa3

func NewValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func NewRootValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func ReadRootValidatorResult(msg *capnp.Message) (ValidatorResult, error) {
	root, err := msg.RootPtr()
	return ValidatorResult{root.Struct()}, err
}

func (s ValidatorResult) String() string {
	str, _ := text.Marshal(0xec1c828dae8bffa3, s.Struct)
	return str
}

func (s ValidatorResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ValidatorResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValidatorResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ValidatorResult_List is a list of ValidatorResult.
type ValidatorResult_List struct{ capnp.List }

// NewValidatorResult creates a new list of ValidatorResult.
func NewValidatorResult_List(s *capnp.Segment, sz int32) (ValidatorResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ValidatorResult_List{l}, err
}

func (s ValidatorResult_List) At(i int) ValidatorResult { return ValidatorResult{s.List.Struct(i)} }

func (s ValidatorResult_List) Set(i int, v ValidatorResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ValidatorResult_List) String() string {
	str, _ := text.MarshalList(0xec1c828dae8bffa3, s.List)
	return str
}

// ValidatorResult_Promise is a wrapper for a ValidatorResult promised by a client call.
type ValidatorResult_Promise struct{ *capnp.Pipeline }

func (p ValidatorResult_Promise) Struct() (ValidatorResult, error) {
	s, err := p.Pipeline.Struct()
	return ValidatorResult{s}, err
}

type Committee struct{ capnp.Struct }

// Committee_TypeID is the unique identifier for the type Committee.
const Committee_TypeID = 0xb89d0df283dbb65c

func NewCommittee(s *capnp.Segment) (Committee, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Committee{st}, err
}

func NewRootCommittee(s *capnp.Segment) (Committee, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Committee{st}, err
}

func ReadRootCommittee(msg *capnp.Message) (Committee, error) {
	root, err := msg.RootPtr()
	return Committee{root.Struct()}, err
}

func (s Committee) String() string {
	str, _ := text.Marshal(0xb89d0df283dbb65c, s.Struct)
	return str
}

func (s Committee) TotalPower() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Committee) SetTotalPower(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Committee) CommitteePower() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Committee) SetCommitteePower(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Committee) Validators() (ValidatorResult_List, error) {
	p, err := s.Struct.Ptr(0)
	return ValidatorResult_List{List: p.List()}, err
}

func (s Committee) HasValidators() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Committee) SetValidators(v ValidatorResult_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValidators sets the validators field to a newly
// allocated ValidatorResult_List, preferring placement in s's segment.
func (s Committee) NewValidators(n int32) (ValidatorResult_List, error) {
	l, err := NewValidatorResult_List(s.Struct.Segment(), n)
	if err != nil {
		return ValidatorResult_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Committee_List is a list of Committee.
type Committee_List struct{ capnp.List }

// NewCommittee creates a new list of Committee.
func NewCommittee_List(s *capnp.Segment, sz int32) (Committee_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Committee_List{l}, err
}

func (s Committee_List) At(i int) Committee { return Committee{s.List.Struct(i)} }

func (s Committee_List) Set(i int, v Committee) error { return s.List.SetStruct(i, v.Struct) }

func (s Committee_List) String() string {
	str, _ := text.MarshalList(0xb89d0df283dbb65c, s.List)
	return str
}

// Committee_Promise is a wrapper for a Committee promised by a client call.
type Committee_Promise struct{ *capnp.Pipeline }

func (p Committee_Promise) Struct() (Committee, error) {
	s, err := p.Pipeline.Struct()
	return Committee{s}, err
}

type Peer struct{ capnp.Struct }

// Peer_TypeID is the unique identifier for the type Peer.
const Peer_TypeID = 0xdeb9cfe7754f053f

func NewPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 4})
	return Peer{st}, err
}

func NewRootPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 4})
	return Peer{st}, err
}

func ReadRootPeer(msg *capnp.Message) (Peer, error) {
	root, err := msg.RootPtr()
	return Peer{root.Struct()}, err
}

func (s Peer) String() string {
	str, _ := text.Marshal(0xdeb9cfe7754f053f, s.Struct)
	return str
}

func (s Peer) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Peer) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Peer) Moniker() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Peer) HasMoniker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Peer) MonikerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Peer) SetMoniker(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Peer) Agent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Peer) HasAgent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Peer) AgentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Peer) SetAgent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Peer) PeerID() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Peer) HasPeerID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Peer) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Peer) SetPeerID(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Peer) PublicKey() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Peer) HasPublicKey() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Peer) PublicKeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Peer) SetPublicKey(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Peer) LastSeen() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Peer) SetLastSeen(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s Peer) Flags() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s Peer) SetFlags(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s Peer) Height() uint32 {
	return s.Struct.Uint32(12)
}

func (s Peer) SetHeight(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s Peer) ReceivedMessages() int32 {
	return int32(s.Struct.Uint32(16))
}

func (s Peer) SetReceivedMessages(v int32) {
	s.Struct.SetUint32(16, uint32(v))
}

func (s Peer) InvalidMessages() int32 {
	return int32(s.Struct.Uint32(20))
}

func (s Peer) SetInvalidMessages(v int32) {
	s.Struct.SetUint32(20, uint32(v))
}

func (s Peer) ReceivedBytes() int32 {
	return int32(s.Struct.Uint32(24))
}

func (s Peer) SetReceivedBytes(v int32) {
	s.Struct.SetUint32(24, uint32(v))
}

// Peer_List is a list of Peer.
type Peer_List struct{ capnp.List }

// NewPeer creates a new list of Peer.
func NewPeer_List(s *capnp.Segment, sz int32) (Peer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 4}, sz)
	return Peer_List{l}, err
}

func (s Peer_List) At(i int) Peer { return Peer{s.List.Struct(i)} }

func (s Peer_List) Set(i int, v Peer) error { return s.List.SetStruct(i, v.Struct) }

func (s Peer_List) String() string {
	str, _ := text.MarshalList(0xdeb9cfe7754f053f, s.List)
	return str
}

// Peer_Promise is a wrapper for a Peer promised by a client call.
type Peer_Promise struct{ *capnp.Pipeline }

func (p Peer_Promise) Struct() (Peer, error) {
	s, err := p.Pipeline.Struct()
	return Peer{s}, err
}

type NetworkInfoResult struct{ capnp.Struct }

// NetworkInfoResult_TypeID is the unique identifier for the type NetworkInfoResult.
const NetworkInfoResult_TypeID = 0x9770d1aea1bdc9cb

func NewNetworkInfoResult(s *capnp.Segment) (NetworkInfoResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkInfoResult{st}, err
}

func NewRootNetworkInfoResult(s *capnp.Segment) (NetworkInfoResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkInfoResult{st}, err
}

func ReadRootNetworkInfoResult(msg *capnp.Message) (NetworkInfoResult, error) {
	root, err := msg.RootPtr()
	return NetworkInfoResult{root.Struct()}, err
}

func (s NetworkInfoResult) String() string {
	str, _ := text.Marshal(0x9770d1aea1bdc9cb, s.Struct)
	return str
}

func (s NetworkInfoResult) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NetworkInfoResult) HasPeerID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NetworkInfoResult) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NetworkInfoResult) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NetworkInfoResult) Peers() (Peer_List, error) {
	p, err := s.Struct.Ptr(1)
	return Peer_List{List: p.List()}, err
}

func (s NetworkInfoResult) HasPeers() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NetworkInfoResult) SetPeers(v Peer_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Peer_List, preferring placement in s's segment.
func (s NetworkInfoResult) NewPeers(n int32) (Peer_List, error) {
	l, err := NewPeer_List(s.Struct.Segment(), n)
	if err != nil {
		return Peer_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// NetworkInfoResult_List is a list of NetworkInfoResult.
type NetworkInfoResult_List struct{ capnp.List }

// NewNetworkInfoResult creates a new list of NetworkInfoResult.
func NewNetworkInfoResult_List(s *capnp.Segment, sz int32) (NetworkInfoResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NetworkInfoResult_List{l}, err
}

func (s NetworkInfoResult_List) At(i int) NetworkInfoResult {
	return NetworkInfoResult{s.List.Struct(i)}
}

func (s NetworkInfoResult_List) Set(i int, v NetworkInfoResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s NetworkInfoResult_List) String() string {
	str, _ := text.MarshalList(0x9770d1aea1bdc9cb, s.List)
	return str
}

// NetworkInfoResult_Promise is a wrapper for a NetworkInfoResult promised by a client call.
type NetworkInfoResult_Promise struct{ *capnp.Pipeline }

func (p NetworkInfoResult_Promise) Struct() (NetworkInfoResult, error) {
	s, err := p.Pipeline.Struct()
	return NetworkInfoResult{s}, err
}

type Vote struct{ capnp.Struct }

// Vote_TypeID is the unique identifier for the type Vote.
const Vote_TypeID = 0xab9a904927908aff

func NewVote(s *capnp.Segment) (Vote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vote{st}, err
}

func NewRootVote(s *capnp.Segment) (Vote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vote{st}, err
}

func ReadRootVote(msg *capnp.Message) (Vote, error) {
	root, err := msg.RootPtr()
	return Vote{root.Struct()}, err
}

func (s Vote) String() string {
	str, _ := text.Marshal(0xab9a904927908aff, s.Struct)
	return str
}

func (s Vote) Type() int8 {
	return int8(s.Struct.Uint8(0))
}

func (s Vote) SetType(v int8) {
	s.Struct.SetUint8(0, uint8(v))
}

func (s Vote) Voter() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Vote) HasVoter() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vote) VoterBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Vote) SetVoter(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Vote) BlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Vote) HasBlockHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Vote) SetBlockHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Vote) Round() int16 {
	return int16(s.Struct.Uint16(2))
}

func (s Vote) SetRound(v int16) {
	s.Struct.SetUint16(2, uint16(v))
}

// Vote_List is a list of Vote.
type Vote_List struct{ capnp.List }

// NewVote creates a new list of Vote.
func NewVote_List(s *capnp.Segment, sz int32) (Vote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Vote_List{l}, err
}

func (s Vote_List) At(i int) Vote { return Vote{s.List.Struct(i)} }

func (s Vote_List) Set(i int, v Vote) error { return s.List.SetStruct(i, v.Struct) }

func (s Vote_List) String() string {
	str, _ := text.MarshalList(0xab9a904927908aff, s.List)
	return str
}

// Vote_Promise is a wrapper for a Vote promised by a client call.
type Vote_Promise struct{ *capnp.Pipeline }

func (p Vote_Promise) Struct() (Vote, error) {
	s, err := p.Pipeline.Struct()
	return Vote{s}, err
}

type ConsensusInfoResult struct{ capnp.Struct }

// ConsensusInfoResult_TypeID is the unique identifier for the type ConsensusInfoResult.
const ConsensusInfoResult_TypeID = 0xddf1212e9514d1f1

func NewConsensusInfoResult(s *capnp.Segment) (ConsensusInfoResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ConsensusInfoResult{st}, err
}

func NewRootConsensusInfoResult(s *capnp.Segment) (ConsensusInfoResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ConsensusInfoResult{st}, err
}

func ReadRootConsensusInfoResult(msg *capnp.Message) (ConsensusInfoResult, error) {
	root, err := msg.RootPtr()
	return ConsensusInfoResult{root.Struct()}, err
}

func (s ConsensusInfoResult) String() string {
	str, _ := text.Marshal(0xddf1212e9514d1f1, s.Struct)
	return str
}

func (s ConsensusInfoResult) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s ConsensusInfoResult) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ConsensusInfoResult) Round() int16 {
	return int16(s.Struct.Uint16(4))
}

func (s ConsensusInfoResult) SetRound(v int16) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s ConsensusInfoResult) Votes() (Vote_List, error) {
	p, err := s.Struct.Ptr(0)
	return Vote_List{List: p.List()}, err
}

func (s ConsensusInfoResult) HasVotes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConsensusInfoResult) SetVotes(v Vote_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVotes sets the votes field to a newly
// allocated Vote_List, preferring placement in s's segment.
func (s ConsensusInfoResult) NewVotes(n int32) (Vote_List, error) {
	l, err := NewVote_List(s.Struct.Segment(), n)
	if err != nil {
		return Vote_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ConsensusInfoResult_List is a list of ConsensusInfoResult.
type ConsensusInfoResult_List struct{ capnp.List }

// NewConsensusInfoResult creates a new list of ConsensusInfoResult.
func NewConsensusInfoResult_List(s *capnp.Segment, sz int32) (ConsensusInfoResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ConsensusInfoResult_List{l}, err
}

func (s ConsensusInfoResult_List) At(i int) ConsensusInfoResult {
	return ConsensusInfoResult{s.List.Struct(i)}
}

func (s ConsensusInfoResult_List) Set(i int, v ConsensusInfoResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ConsensusInfoResult_List) String() string {
	str, _ := text.MarshalList(0xddf1212e9514d1f1, s.List)
	return str
}

// ConsensusInfoResult_Promise is a wrapper for a ConsensusInfoResult promised by a client call.
type ConsensusInfoResult_Promise struct{ *capnp.Pipeline }

func (p ConsensusInfoResult_Promise) Struct() (ConsensusInfoResult, error) {
	s, err := p.Pipeline.Struct()
	return ConsensusInfoResult{s}, err
}

type SendTransactionResult struct{ capnp.Struct }

// SendTransactionResult_TypeID is the unique identifier for the type SendTransactionResult.
const SendTransactionResult_TypeID = 0xcfd704b9b2c62a4a

func NewSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func NewRootSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func ReadRootSendTransactionResult(msg *capnp.Message) (SendTransactionResult, error) {
	root, err := msg.RootPtr()
	return SendTransactionResult{root.Struct()}, err
}

func (s SendTransactionResult) String() string {
	str, _ := text.Marshal(0xcfd704b9b2c62a4a, s.Struct)
	return str
}

func (s SendTransactionResult) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s SendTransactionResult) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s SendTransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SendTransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SendTransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// SendTransactionResult_List is a list of SendTransactionResult.
type SendTransactionResult_List struct{ capnp.List }

// NewSendTransactionResult creates a new list of SendTransactionResult.
func NewSendTransactionResult_List(s *capnp.Segment, sz int32) (SendTransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SendTransactionResult_List{l}, err
}

func (s SendTransactionResult_List) At(i int) SendTransactionResult {
	return SendTransactionResult{s.List.Struct(i)}
}

func (s SendTransactionResult_List) Set(i int, v SendTransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SendTransactionResult_List) String() string {
	str, _ := text.MarshalList(0xcfd704b9b2c62a4a, s.List)
	return str
}

// SendTransactionResult_Promise is a wrapper for a SendTransactionResult promised by a client call.
type SendTransactionResult_Promise struct{ *capnp.Pipeline }

func (p SendTransactionResult_Promise) Struct() (SendTransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return SendTransactionResult{s}, err
}

type PactusServer struct{ Client capnp.Client }

// PactusServer_TypeID is the unique identifier for the type PactusServer.
const PactusServer_TypeID = 0x93e35d981ce226a9

func (c PactusServer) GetBlock(ctx context.Context, params func(PactusServer_getBlock_Params) error, opts ...capnp.CallOption) PactusServer_getBlock_Results_Promise {
	if c.Client == nil {
		return PactusServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      0,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getBlock",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(PactusServer_getBlock_Params{Struct: s}) }
	}
	return PactusServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c PactusServer) GetBlockHash(ctx context.Context, params func(PactusServer_getBlockHash_Params) error, opts ...capnp.CallOption) PactusServer_getBlockHash_Results_Promise {
	if c.Client == nil {
		return PactusServer_getBlockHash_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      1,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getBlockHash",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(PactusServer_getBlockHash_Params{Struct: s}) }
	}
	return PactusServer_getBlockHash_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c PactusServer) GetTransaction(ctx context.Context, params func(PactusServer_getTransaction_Params) error, opts ...capnp.CallOption) PactusServer_getTransaction_Results_Promise {
	if c.Client == nil {
		return PactusServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      2,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(PactusServer_getTransaction_Params{Struct: s}) }
	}
	return PactusServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c PactusServer) GetAccount(ctx context.Context, params func(PactusServer_getAccount_Params) error, opts ...capnp.CallOption) PactusServer_getAccount_Results_Promise {
	if c.Client == nil {
		return PactusServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      3,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getAccount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(PactusServer_getAccount_Params{Struct: s}) }
	}
	return PactusServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c PactusServer) GetValidator(ctx context.Context, params func(PactusServer_getValidator_Params) error, opts ...capnp.CallOption) PactusServer_getValidator_Results_Promise {
	if c.Client == nil {
		return PactusServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      4,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getValidator",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(PactusServer_getValidator_Params{Struct: s}) }
	}
	return PactusServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c PactusServer) GetBlockchainInfo(ctx context.Context, params func(PactusServer_getBlockchainInfo_Params) error, opts ...capnp.CallOption) PactusServer_getBlockchainInfo_Results_Promise {
	if c.Client == nil {
		return PactusServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      5,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getBlockchainInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(PactusServer_getBlockchainInfo_Params{Struct: s}) }
	}
	return PactusServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c PactusServer) GetNetworkInfo(ctx context.Context, params func(PactusServer_getNetworkInfo_Params) error, opts ...capnp.CallOption) PactusServer_getNetworkInfo_Results_Promise {
	if c.Client == nil {
		return PactusServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      6,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getNetworkInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(PactusServer_getNetworkInfo_Params{Struct: s}) }
	}
	return PactusServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c PactusServer) GetConsensusInfo(ctx context.Context, params func(PactusServer_getConsensusInfo_Params) error, opts ...capnp.CallOption) PactusServer_getConsensusInfo_Results_Promise {
	if c.Client == nil {
		return PactusServer_getConsensusInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      7,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getConsensusInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(PactusServer_getConsensusInfo_Params{Struct: s}) }
	}
	return PactusServer_getConsensusInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c PactusServer) SendRawTransaction(ctx context.Context, params func(PactusServer_sendRawTransaction_Params) error, opts ...capnp.CallOption) PactusServer_sendRawTransaction_Results_Promise {
	if c.Client == nil {
		return PactusServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      8,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "sendRawTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(PactusServer_sendRawTransaction_Params{Struct: s}) }
	}
	return PactusServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type PactusServer_Server interface {
	GetBlock(PactusServer_getBlock) error

	GetBlockHash(PactusServer_getBlockHash) error

	GetTransaction(PactusServer_getTransaction) error

	GetAccount(PactusServer_getAccount) error

	GetValidator(PactusServer_getValidator) error

	GetBlockchainInfo(PactusServer_getBlockchainInfo) error

	GetNetworkInfo(PactusServer_getNetworkInfo) error

	GetConsensusInfo(PactusServer_getConsensusInfo) error

	SendRawTransaction(PactusServer_sendRawTransaction) error
}

func PactusServer_ServerToClient(s PactusServer_Server) PactusServer {
	c, _ := s.(server.Closer)
	return PactusServer{Client: server.New(PactusServer_Methods(nil, s), c)}
}

func PactusServer_Methods(methods []server.Method, s PactusServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      0,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getBlock",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := PactusServer_getBlock{c, opts, PactusServer_getBlock_Params{Struct: p}, PactusServer_getBlock_Results{Struct: r}}
			return s.GetBlock(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      1,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getBlockHash",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := PactusServer_getBlockHash{c, opts, PactusServer_getBlockHash_Params{Struct: p}, PactusServer_getBlockHash_Results{Struct: r}}
			return s.GetBlockHash(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      2,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := PactusServer_getTransaction{c, opts, PactusServer_getTransaction_Params{Struct: p}, PactusServer_getTransaction_Results{Struct: r}}
			return s.GetTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      3,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getAccount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := PactusServer_getAccount{c, opts, PactusServer_getAccount_Params{Struct: p}, PactusServer_getAccount_Results{Struct: r}}
			return s.GetAccount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      4,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getValidator",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := PactusServer_getValidator{c, opts, PactusServer_getValidator_Params{Struct: p}, PactusServer_getValidator_Results{Struct: r}}
			return s.GetValidator(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      5,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getBlockchainInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := PactusServer_getBlockchainInfo{c, opts, PactusServer_getBlockchainInfo_Params{Struct: p}, PactusServer_getBlockchainInfo_Results{Struct: r}}
			return s.GetBlockchainInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      6,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getNetworkInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := PactusServer_getNetworkInfo{c, opts, PactusServer_getNetworkInfo_Params{Struct: p}, PactusServer_getNetworkInfo_Results{Struct: r}}
			return s.GetNetworkInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      7,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "getConsensusInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := PactusServer_getConsensusInfo{c, opts, PactusServer_getConsensusInfo_Params{Struct: p}, PactusServer_getConsensusInfo_Results{Struct: r}}
			return s.GetConsensusInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x93e35d981ce226a9,
			MethodID:      8,
			InterfaceName: "www/capnp/pactus.capnp:PactusServer",
			MethodName:    "sendRawTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := PactusServer_sendRawTransaction{c, opts, PactusServer_sendRawTransaction_Params{Struct: p}, PactusServer_sendRawTransaction_Results{Struct: r}}
			return s.SendRawTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// PactusServer_getBlock holds the arguments for a server call to PactusServer.getBlock.
type PactusServer_getBlock struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  PactusServer_getBlock_Params
	Results PactusServer_getBlock_Results
}

// PactusServer_getBlockHash holds the arguments for a server call to PactusServer.getBlockHash.
type PactusServer_getBlockHash struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  PactusServer_getBlockHash_Params
	Results PactusServer_getBlockHash_Results
}

// PactusServer_getTransaction holds the arguments for a server call to PactusServer.getTransaction.
type PactusServer_getTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  PactusServer_getTransaction_Params
	Results PactusServer_getTransaction_Results
}

// PactusServer_getAccount holds the arguments for a server call to PactusServer.getAccount.
type PactusServer_getAccount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  PactusServer_getAccount_Params
	Results PactusServer_getAccount_Results
}

// PactusServer_getValidator holds the arguments for a server call to PactusServer.getValidator.
type PactusServer_getValidator struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  PactusServer_getValidator_Params
	Results PactusServer_getValidator_Results
}

// PactusServer_getBlockchainInfo holds the arguments for a server call to PactusServer.getBlockchainInfo.
type PactusServer_getBlockchainInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  PactusServer_getBlockchainInfo_Params
	Results PactusServer_getBlockchainInfo_Results
}

// PactusServer_getNetworkInfo holds the arguments for a server call to PactusServer.getNetworkInfo.
type PactusServer_getNetworkInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  PactusServer_getNetworkInfo_Params
	Results PactusServer_getNetworkInfo_Results
}

// PactusServer_getConsensusInfo holds the arguments for a server call to PactusServer.getConsensusInfo.
type PactusServer_getConsensusInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  PactusServer_getConsensusInfo_Params
	Results PactusServer_getConsensusInfo_Results
}

// PactusServer_sendRawTransaction holds the arguments for a server call to PactusServer.sendRawTransaction.
type PactusServer_sendRawTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  PactusServer_sendRawTransaction_Params
	Results PactusServer_sendRawTransaction_Results
}

type PactusServer_getBlock_Params struct{ capnp.Struct }

// PactusServer_getBlock_Params_TypeID is the unique identifier for the type PactusServer_getBlock_Params.
const PactusServer_getBlock_Params_TypeID = 0xc491154730a9b313

func NewPactusServer_getBlock_Params(s *capnp.Segment) (PactusServer_getBlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PactusServer_getBlock_Params{st}, err
}

func NewRootPactusServer_getBlock_Params(s *capnp.Segment) (PactusServer_getBlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PactusServer_getBlock_Params{st}, err
}

func ReadRootPactusServer_getBlock_Params(msg *capnp.Message) (PactusServer_getBlock_Params, error) {
	root, err := msg.RootPtr()
	return PactusServer_getBlock_Params{root.Struct()}, err
}

func (s PactusServer_getBlock_Params) String() string {
	str, _ := text.Marshal(0xc491154730a9b313, s.Struct)
	return str
}

func (s PactusServer_getBlock_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PactusServer_getBlock_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getBlock_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PactusServer_getBlock_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s PactusServer_getBlock_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// PactusServer_getBlock_Params_List is a list of PactusServer_getBlock_Params.
type PactusServer_getBlock_Params_List struct{ capnp.List }

// NewPactusServer_getBlock_Params creates a new list of PactusServer_getBlock_Params.
func NewPactusServer_getBlock_Params_List(s *capnp.Segment, sz int32) (PactusServer_getBlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PactusServer_getBlock_Params_List{l}, err
}

func (s PactusServer_getBlock_Params_List) At(i int) PactusServer_getBlock_Params {
	return PactusServer_getBlock_Params{s.List.Struct(i)}
}

func (s PactusServer_getBlock_Params_List) Set(i int, v PactusServer_getBlock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getBlock_Params_List) String() string {
	str, _ := text.MarshalList(0xc491154730a9b313, s.List)
	return str
}

// PactusServer_getBlock_Params_Promise is a wrapper for a PactusServer_getBlock_Params promised by a client call.
type PactusServer_getBlock_Params_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getBlock_Params_Promise) Struct() (PactusServer_getBlock_Params, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getBlock_Params{s}, err
}

type PactusServer_getBlock_Results struct{ capnp.Struct }

// PactusServer_getBlock_Results_TypeID is the unique identifier for the type PactusServer_getBlock_Results.
const PactusServer_getBlock_Results_TypeID = 0xa11579dd4962059f

func NewPactusServer_getBlock_Results(s *capnp.Segment) (PactusServer_getBlock_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getBlock_Results{st}, err
}

func NewRootPactusServer_getBlock_Results(s *capnp.Segment) (PactusServer_getBlock_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getBlock_Results{st}, err
}

func ReadRootPactusServer_getBlock_Results(msg *capnp.Message) (PactusServer_getBlock_Results, error) {
	root, err := msg.RootPtr()
	return PactusServer_getBlock_Results{root.Struct()}, err
}

func (s PactusServer_getBlock_Results) String() string {
	str, _ := text.Marshal(0xa11579dd4962059f, s.Struct)
	return str
}

func (s PactusServer_getBlock_Results) Result() (BlockResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockResult{Struct: p.Struct()}, err
}

func (s PactusServer_getBlock_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getBlock_Results) SetResult(v BlockResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockResult struct, preferring placement in s's segment.
func (s PactusServer_getBlock_Results) NewResult() (BlockResult, error) {
	ss, err := NewBlockResult(s.Struct.Segment())
	if err != nil {
		return BlockResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PactusServer_getBlock_Results_List is a list of PactusServer_getBlock_Results.
type PactusServer_getBlock_Results_List struct{ capnp.List }

// NewPactusServer_getBlock_Results creates a new list of PactusServer_getBlock_Results.
func NewPactusServer_getBlock_Results_List(s *capnp.Segment, sz int32) (PactusServer_getBlock_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PactusServer_getBlock_Results_List{l}, err
}

func (s PactusServer_getBlock_Results_List) At(i int) PactusServer_getBlock_Results {
	return PactusServer_getBlock_Results{s.List.Struct(i)}
}

func (s PactusServer_getBlock_Results_List) Set(i int, v PactusServer_getBlock_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getBlock_Results_List) String() string {
	str, _ := text.MarshalList(0xa11579dd4962059f, s.List)
	return str
}

// PactusServer_getBlock_Results_Promise is a wrapper for a PactusServer_getBlock_Results promised by a client call.
type PactusServer_getBlock_Results_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getBlock_Results_Promise) Struct() (PactusServer_getBlock_Results, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getBlock_Results{s}, err
}

func (p PactusServer_getBlock_Results_Promise) Result() BlockResult_Promise {
	return BlockResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PactusServer_getBlockHash_Params struct{ capnp.Struct }

// PactusServer_getBlockHash_Params_TypeID is the unique identifier for the type PactusServer_getBlockHash_Params.
const PactusServer_getBlockHash_Params_TypeID = 0xc7ebd41a5aa611ff

func NewPactusServer_getBlockHash_Params(s *capnp.Segment) (PactusServer_getBlockHash_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PactusServer_getBlockHash_Params{st}, err
}

func NewRootPactusServer_getBlockHash_Params(s *capnp.Segment) (PactusServer_getBlockHash_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PactusServer_getBlockHash_Params{st}, err
}

func ReadRootPactusServer_getBlockHash_Params(msg *capnp.Message) (PactusServer_getBlockHash_Params, error) {
	root, err := msg.RootPtr()
	return PactusServer_getBlockHash_Params{root.Struct()}, err
}

func (s PactusServer_getBlockHash_Params) String() string {
	str, _ := text.Marshal(0xc7ebd41a5aa611ff, s.Struct)
	return str
}

func (s PactusServer_getBlockHash_Params) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s PactusServer_getBlockHash_Params) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

// PactusServer_getBlockHash_Params_List is a list of PactusServer_getBlockHash_Params.
type PactusServer_getBlockHash_Params_List struct{ capnp.List }

// NewPactusServer_getBlockHash_Params creates a new list of PactusServer_getBlockHash_Params.
func NewPactusServer_getBlockHash_Params_List(s *capnp.Segment, sz int32) (PactusServer_getBlockHash_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return PactusServer_getBlockHash_Params_List{l}, err
}

func (s PactusServer_getBlockHash_Params_List) At(i int) PactusServer_getBlockHash_Params {
	return PactusServer_getBlockHash_Params{s.List.Struct(i)}
}

func (s PactusServer_getBlockHash_Params_List) Set(i int, v PactusServer_getBlockHash_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getBlockHash_Params_List) String() string {
	str, _ := text.MarshalList(0xc7ebd41a5aa611ff, s.List)
	return str
}

// PactusServer_getBlockHash_Params_Promise is a wrapper for a PactusServer_getBlockHash_Params promised by a client call.
type PactusServer_getBlockHash_Params_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getBlockHash_Params_Promise) Struct() (PactusServer_getBlockHash_Params, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getBlockHash_Params{s}, err
}

type PactusServer_getBlockHash_Results struct{ capnp.Struct }

// PactusServer_getBlockHash_Results_TypeID is the unique identifier for the type PactusServer_getBlockHash_Results.
const PactusServer_getBlockHash_Results_TypeID = 0xb4956119e567e635

func NewPactusServer_getBlockHash_Results(s *capnp.Segment) (PactusServer_getBlockHash_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getBlockHash_Results{st}, err
}

func NewRootPactusServer_getBlockHash_Results(s *capnp.Segment) (PactusServer_getBlockHash_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getBlockHash_Results{st}, err
}

func ReadRootPactusServer_getBlockHash_Results(msg *capnp.Message) (PactusServer_getBlockHash_Results, error) {
	root, err := msg.RootPtr()
	return PactusServer_getBlockHash_Results{root.Struct()}, err
}

func (s PactusServer_getBlockHash_Results) String() string {
	str, _ := text.Marshal(0xb4956119e567e635, s.Struct)
	return str
}

func (s PactusServer_getBlockHash_Results) Result() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PactusServer_getBlockHash_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getBlockHash_Results) SetResult(v []byte) error {
	return s.Struct.SetData(0, v)
}

// PactusServer_getBlockHash_Results_List is a list of PactusServer_getBlockHash_Results.
type PactusServer_getBlockHash_Results_List struct{ capnp.List }

// NewPactusServer_getBlockHash_Results creates a new list of PactusServer_getBlockHash_Results.
func NewPactusServer_getBlockHash_Results_List(s *capnp.Segment, sz int32) (PactusServer_getBlockHash_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PactusServer_getBlockHash_Results_List{l}, err
}

func (s PactusServer_getBlockHash_Results_List) At(i int) PactusServer_getBlockHash_Results {
	return PactusServer_getBlockHash_Results{s.List.Struct(i)}
}

func (s PactusServer_getBlockHash_Results_List) Set(i int, v PactusServer_getBlockHash_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getBlockHash_Results_List) String() string {
	str, _ := text.MarshalList(0xb4956119e567e635, s.List)
	return str
}

// PactusServer_getBlockHash_Results_Promise is a wrapper for a PactusServer_getBlockHash_Results promised by a client call.
type PactusServer_getBlockHash_Results_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getBlockHash_Results_Promise) Struct() (PactusServer_getBlockHash_Results, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getBlockHash_Results{s}, err
}

type PactusServer_getTransaction_Params struct{ capnp.Struct }

// PactusServer_getTransaction_Params_TypeID is the unique identifier for the type PactusServer_getTransaction_Params.
const PactusServer_getTransaction_Params_TypeID = 0xa2781bf8c3aee3b7

func NewPactusServer_getTransaction_Params(s *capnp.Segment) (PactusServer_getTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PactusServer_getTransaction_Params{st}, err
}

func NewRootPactusServer_getTransaction_Params(s *capnp.Segment) (PactusServer_getTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PactusServer_getTransaction_Params{st}, err
}

func ReadRootPactusServer_getTransaction_Params(msg *capnp.Message) (PactusServer_getTransaction_Params, error) {
	root, err := msg.RootPtr()
	return PactusServer_getTransaction_Params{root.Struct()}, err
}

func (s PactusServer_getTransaction_Params) String() string {
	str, _ := text.Marshal(0xa2781bf8c3aee3b7, s.Struct)
	return str
}

func (s PactusServer_getTransaction_Params) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PactusServer_getTransaction_Params) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getTransaction_Params) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PactusServer_getTransaction_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s PactusServer_getTransaction_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// PactusServer_getTransaction_Params_List is a list of PactusServer_getTransaction_Params.
type PactusServer_getTransaction_Params_List struct{ capnp.List }

// NewPactusServer_getTransaction_Params creates a new list of PactusServer_getTransaction_Params.
func NewPactusServer_getTransaction_Params_List(s *capnp.Segment, sz int32) (PactusServer_getTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PactusServer_getTransaction_Params_List{l}, err
}

func (s PactusServer_getTransaction_Params_List) At(i int) PactusServer_getTransaction_Params {
	return PactusServer_getTransaction_Params{s.List.Struct(i)}
}

func (s PactusServer_getTransaction_Params_List) Set(i int, v PactusServer_getTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0xa2781bf8c3aee3b7, s.List)
	return str
}

// PactusServer_getTransaction_Params_Promise is a wrapper for a PactusServer_getTransaction_Params promised by a client call.
type PactusServer_getTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getTransaction_Params_Promise) Struct() (PactusServer_getTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getTransaction_Params{s}, err
}

type PactusServer_getTransaction_Results struct{ capnp.Struct }

// PactusServer_getTransaction_Results_TypeID is the unique identifier for the type PactusServer_getTransaction_Results.
const PactusServer_getTransaction_Results_TypeID = 0xe0f664cf64c2a69d

func NewPactusServer_getTransaction_Results(s *capnp.Segment) (PactusServer_getTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getTransaction_Results{st}, err
}

func NewRootPactusServer_getTransaction_Results(s *capnp.Segment) (PactusServer_getTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getTransaction_Results{st}, err
}

func ReadRootPactusServer_getTransaction_Results(msg *capnp.Message) (PactusServer_getTransaction_Results, error) {
	root, err := msg.RootPtr()
	return PactusServer_getTransaction_Results{root.Struct()}, err
}

func (s PactusServer_getTransaction_Results) String() string {
	str, _ := text.Marshal(0xe0f664cf64c2a69d, s.Struct)
	return str
}

func (s PactusServer_getTransaction_Results) Result() (TransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return TransactionResult{Struct: p.Struct()}, err
}

func (s PactusServer_getTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getTransaction_Results) SetResult(v TransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated TransactionResult struct, preferring placement in s's segment.
func (s PactusServer_getTransaction_Results) NewResult() (TransactionResult, error) {
	ss, err := NewTransactionResult(s.Struct.Segment())
	if err != nil {
		return TransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PactusServer_getTransaction_Results_List is a list of PactusServer_getTransaction_Results.
type PactusServer_getTransaction_Results_List struct{ capnp.List }

// NewPactusServer_getTransaction_Results creates a new list of PactusServer_getTransaction_Results.
func NewPactusServer_getTransaction_Results_List(s *capnp.Segment, sz int32) (PactusServer_getTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PactusServer_getTransaction_Results_List{l}, err
}

func (s PactusServer_getTransaction_Results_List) At(i int) PactusServer_getTransaction_Results {
	return PactusServer_getTransaction_Results{s.List.Struct(i)}
}

func (s PactusServer_getTransaction_Results_List) Set(i int, v PactusServer_getTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0xe0f664cf64c2a69d, s.List)
	return str
}

// PactusServer_getTransaction_Results_Promise is a wrapper for a PactusServer_getTransaction_Results promised by a client call.
type PactusServer_getTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getTransaction_Results_Promise) Struct() (PactusServer_getTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getTransaction_Results{s}, err
}

func (p PactusServer_getTransaction_Results_Promise) Result() TransactionResult_Promise {
	return TransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PactusServer_getAccount_Params struct{ capnp.Struct }

// PactusServer_getAccount_Params_TypeID is the unique identifier for the type PactusServer_getAccount_Params.
const PactusServer_getAccount_Params_TypeID = 0x88b90d73d814fe7b

func NewPactusServer_getAccount_Params(s *capnp.Segment) (PactusServer_getAccount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PactusServer_getAccount_Params{st}, err
}

func NewRootPactusServer_getAccount_Params(s *capnp.Segment) (PactusServer_getAccount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PactusServer_getAccount_Params{st}, err
}

func ReadRootPactusServer_getAccount_Params(msg *capnp.Message) (PactusServer_getAccount_Params, error) {
	root, err := msg.RootPtr()
	return PactusServer_getAccount_Params{root.Struct()}, err
}

func (s PactusServer_getAccount_Params) String() string {
	str, _ := text.Marshal(0x88b90d73d814fe7b, s.Struct)
	return str
}

func (s PactusServer_getAccount_Params) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PactusServer_getAccount_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getAccount_Params) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PactusServer_getAccount_Params) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PactusServer_getAccount_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s PactusServer_getAccount_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// PactusServer_getAccount_Params_List is a list of PactusServer_getAccount_Params.
type PactusServer_getAccount_Params_List struct{ capnp.List }

// NewPactusServer_getAccount_Params creates a new list of PactusServer_getAccount_Params.
func NewPactusServer_getAccount_Params_List(s *capnp.Segment, sz int32) (PactusServer_getAccount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PactusServer_getAccount_Params_List{l}, err
}

func (s PactusServer_getAccount_Params_List) At(i int) PactusServer_getAccount_Params {
	return PactusServer_getAccount_Params{s.List.Struct(i)}
}

func (s PactusServer_getAccount_Params_List) Set(i int, v PactusServer_getAccount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getAccount_Params_List) String() string {
	str, _ := text.MarshalList(0x88b90d73d814fe7b, s.List)
	return str
}

// PactusServer_getAccount_Params_Promise is a wrapper for a PactusServer_getAccount_Params promised by a client call.
type PactusServer_getAccount_Params_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getAccount_Params_Promise) Struct() (PactusServer_getAccount_Params, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getAccount_Params{s}, err
}

type PactusServer_getAccount_Results struct{ capnp.Struct }

// PactusServer_getAccount_Results_TypeID is the unique identifier for the type PactusServer_getAccount_Results.
const PactusServer_getAccount_Results_TypeID = 0x872ed7cc55340b43

func NewPactusServer_getAccount_Results(s *capnp.Segment) (PactusServer_getAccount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getAccount_Results{st}, err
}

func NewRootPactusServer_getAccount_Results(s *capnp.Segment) (PactusServer_getAccount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getAccount_Results{st}, err
}

func ReadRootPactusServer_getAccount_Results(msg *capnp.Message) (PactusServer_getAccount_Results, error) {
	root, err := msg.RootPtr()
	return PactusServer_getAccount_Results{root.Struct()}, err
}

func (s PactusServer_getAccount_Results) String() string {
	str, _ := text.Marshal(0x872ed7cc55340b43, s.Struct)
	return str
}

func (s PactusServer_getAccount_Results) Result() (AccountResult, error) {
	p, err := s.Struct.Ptr(0)
	return AccountResult{Struct: p.Struct()}, err
}

func (s PactusServer_getAccount_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getAccount_Results) SetResult(v AccountResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated AccountResult struct, preferring placement in s's segment.
func (s PactusServer_getAccount_Results) NewResult() (AccountResult, error) {
	ss, err := NewAccountResult(s.Struct.Segment())
	if err != nil {
		return AccountResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PactusServer_getAccount_Results_List is a list of PactusServer_getAccount_Results.
type PactusServer_getAccount_Results_List struct{ capnp.List }

// NewPactusServer_getAccount_Results creates a new list of PactusServer_getAccount_Results.
func NewPactusServer_getAccount_Results_List(s *capnp.Segment, sz int32) (PactusServer_getAccount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PactusServer_getAccount_Results_List{l}, err
}

func (s PactusServer_getAccount_Results_List) At(i int) PactusServer_getAccount_Results {
	return PactusServer_getAccount_Results{s.List.Struct(i)}
}

func (s PactusServer_getAccount_Results_List) Set(i int, v PactusServer_getAccount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getAccount_Results_List) String() string {
	str, _ := text.MarshalList(0x872ed7cc55340b43, s.List)
	return str
}

// PactusServer_getAccount_Results_Promise is a wrapper for a PactusServer_getAccount_Results promised by a client call.
type PactusServer_getAccount_Results_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getAccount_Results_Promise) Struct() (PactusServer_getAccount_Results, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getAccount_Results{s}, err
}

func (p PactusServer_getAccount_Results_Promise) Result() AccountResult_Promise {
	return AccountResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PactusServer_getValidator_Params struct{ capnp.Struct }

// PactusServer_getValidator_Params_TypeID is the unique identifier for the type PactusServer_getValidator_Params.
const PactusServer_getValidator_Params_TypeID = 0xa9c1656f28f615b1

func NewPactusServer_getValidator_Params(s *capnp.Segment) (PactusServer_getValidator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PactusServer_getValidator_Params{st}, err
}

func NewRootPactusServer_getValidator_Params(s *capnp.Segment) (PactusServer_getValidator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PactusServer_getValidator_Params{st}, err
}

func ReadRootPactusServer_getValidator_Params(msg *capnp.Message) (PactusServer_getValidator_Params, error) {
	root, err := msg.RootPtr()
	return PactusServer_getValidator_Params{root.Struct()}, err
}

func (s PactusServer_getValidator_Params) String() string {
	str, _ := text.Marshal(0xa9c1656f28f615b1, s.Struct)
	return str
}

func (s PactusServer_getValidator_Params) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PactusServer_getValidator_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getValidator_Params) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PactusServer_getValidator_Params) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PactusServer_getValidator_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s PactusServer_getValidator_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// PactusServer_getValidator_Params_List is a list of PactusServer_getValidator_Params.
type PactusServer_getValidator_Params_List struct{ capnp.List }

// NewPactusServer_getValidator_Params creates a new list of PactusServer_getValidator_Params.
func NewPactusServer_getValidator_Params_List(s *capnp.Segment, sz int32) (PactusServer_getValidator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PactusServer_getValidator_Params_List{l}, err
}

func (s PactusServer_getValidator_Params_List) At(i int) PactusServer_getValidator_Params {
	return PactusServer_getValidator_Params{s.List.Struct(i)}
}

func (s PactusServer_getValidator_Params_List) Set(i int, v PactusServer_getValidator_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getValidator_Params_List) String() string {
	str, _ := text.MarshalList(0xa9c1656f28f615b1, s.List)
	return str
}

// PactusServer_getValidator_Params_Promise is a wrapper for a PactusServer_getValidator_Params promised by a client call.
type PactusServer_getValidator_Params_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getValidator_Params_Promise) Struct() (PactusServer_getValidator_Params, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getValidator_Params{s}, err
}

type PactusServer_getValidator_Results struct{ capnp.Struct }

// PactusServer_getValidator_Results_TypeID is the unique identifier for the type PactusServer_getValidator_Results.
const PactusServer_getValidator_Results_TypeID = 0xc6a382e8a87605a0

func NewPactusServer_getValidator_Results(s *capnp.Segment) (PactusServer_getValidator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getValidator_Results{st}, err
}

func NewRootPactusServer_getValidator_Results(s *capnp.Segment) (PactusServer_getValidator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getValidator_Results{st}, err
}

func ReadRootPactusServer_getValidator_Results(msg *capnp.Message) (PactusServer_getValidator_Results, error) {
	root, err := msg.RootPtr()
	return PactusServer_getValidator_Results{root.Struct()}, err
}

func (s PactusServer_getValidator_Results) String() string {
	str, _ := text.Marshal(0xc6a382e8a87605a0, s.Struct)
	return str
}

func (s PactusServer_getValidator_Results) Result() (ValidatorResult, error) {
	p, err := s.Struct.Ptr(0)
	return ValidatorResult{Struct: p.Struct()}, err
}

func (s PactusServer_getValidator_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getValidator_Results) SetResult(v ValidatorResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated ValidatorResult struct, preferring placement in s's segment.
func (s PactusServer_getValidator_Results) NewResult() (ValidatorResult, error) {
	ss, err := NewValidatorResult(s.Struct.Segment())
	if err != nil {
		return ValidatorResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PactusServer_getValidator_Results_List is a list of PactusServer_getValidator_Results.
type PactusServer_getValidator_Results_List struct{ capnp.List }

// NewPactusServer_getValidator_Results creates a new list of PactusServer_getValidator_Results.
func NewPactusServer_getValidator_Results_List(s *capnp.Segment, sz int32) (PactusServer_getValidator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PactusServer_getValidator_Results_List{l}, err
}

func (s PactusServer_getValidator_Results_List) At(i int) PactusServer_getValidator_Results {
	return PactusServer_getValidator_Results{s.List.Struct(i)}
}

func (s PactusServer_getValidator_Results_List) Set(i int, v PactusServer_getValidator_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getValidator_Results_List) String() string {
	str, _ := text.MarshalList(0xc6a382e8a87605a0, s.List)
	return str
}

// PactusServer_getValidator_Results_Promise is a wrapper for a PactusServer_getValidator_Results promised by a client call.
type PactusServer_getValidator_Results_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getValidator_Results_Promise) Struct() (PactusServer_getValidator_Results, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getValidator_Results{s}, err
}

func (p PactusServer_getValidator_Results_Promise) Result() ValidatorResult_Promise {
	return ValidatorResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PactusServer_getBlockchainInfo_Params struct{ capnp.Struct }

// PactusServer_getBlockchainInfo_Params_TypeID is the unique identifier for the type PactusServer_getBlockchainInfo_Params.
const PactusServer_getBlockchainInfo_Params_TypeID = 0xc73bc804887c2453

func NewPactusServer_getBlockchainInfo_Params(s *capnp.Segment) (PactusServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PactusServer_getBlockchainInfo_Params{st}, err
}

func NewRootPactusServer_getBlockchainInfo_Params(s *capnp.Segment) (PactusServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PactusServer_getBlockchainInfo_Params{st}, err
}

func ReadRootPactusServer_getBlockchainInfo_Params(msg *capnp.Message) (PactusServer_getBlockchainInfo_Params, error) {
	root, err := msg.RootPtr()
	return PactusServer_getBlockchainInfo_Params{root.Struct()}, err
}

func (s PactusServer_getBlockchainInfo_Params) String() string {
	str, _ := text.Marshal(0xc73bc804887c2453, s.Struct)
	return str
}

// PactusServer_getBlockchainInfo_Params_List is a list of PactusServer_getBlockchainInfo_Params.
type PactusServer_getBlockchainInfo_Params_List struct{ capnp.List }

// NewPactusServer_getBlockchainInfo_Params creates a new list of PactusServer_getBlockchainInfo_Params.
func NewPactusServer_getBlockchainInfo_Params_List(s *capnp.Segment, sz int32) (PactusServer_getBlockchainInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PactusServer_getBlockchainInfo_Params_List{l}, err
}

func (s PactusServer_getBlockchainInfo_Params_List) At(i int) PactusServer_getBlockchainInfo_Params {
	return PactusServer_getBlockchainInfo_Params{s.List.Struct(i)}
}

func (s PactusServer_getBlockchainInfo_Params_List) Set(i int, v PactusServer_getBlockchainInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getBlockchainInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xc73bc804887c2453, s.List)
	return str
}

// PactusServer_getBlockchainInfo_Params_Promise is a wrapper for a PactusServer_getBlockchainInfo_Params promised by a client call.
type PactusServer_getBlockchainInfo_Params_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getBlockchainInfo_Params_Promise) Struct() (PactusServer_getBlockchainInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getBlockchainInfo_Params{s}, err
}

type PactusServer_getBlockchainInfo_Results struct{ capnp.Struct }

// PactusServer_getBlockchainInfo_Results_TypeID is the unique identifier for the type PactusServer_getBlockchainInfo_Results.
const PactusServer_getBlockchainInfo_Results_TypeID = 0x9ddf8c9e87a562a9

func NewPactusServer_getBlockchainInfo_Results(s *capnp.Segment) (PactusServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getBlockchainInfo_Results{st}, err
}

func NewRootPactusServer_getBlockchainInfo_Results(s *capnp.Segment) (PactusServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getBlockchainInfo_Results{st}, err
}

func ReadRootPactusServer_getBlockchainInfo_Results(msg *capnp.Message) (PactusServer_getBlockchainInfo_Results, error) {
	root, err := msg.RootPtr()
	return PactusServer_getBlockchainInfo_Results{root.Struct()}, err
}

func (s PactusServer_getBlockchainInfo_Results) String() string {
	str, _ := text.Marshal(0x9ddf8c9e87a562a9, s.Struct)
	return str
}

func (s PactusServer_getBlockchainInfo_Results) Result() (BlockchainInfoResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockchainInfoResult{Struct: p.Struct()}, err
}

func (s PactusServer_getBlockchainInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getBlockchainInfo_Results) SetResult(v BlockchainInfoResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockchainInfoResult struct, preferring placement in s's segment.
func (s PactusServer_getBlockchainInfo_Results) NewResult() (BlockchainInfoResult, error) {
	ss, err := NewBlockchainInfoResult(s.Struct.Segment())
	if err != nil {
		return BlockchainInfoResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PactusServer_getBlockchainInfo_Results_List is a list of PactusServer_getBlockchainInfo_Results.
type PactusServer_getBlockchainInfo_Results_List struct{ capnp.List }

// NewPactusServer_getBlockchainInfo_Results creates a new list of PactusServer_getBlockchainInfo_Results.
func NewPactusServer_getBlockchainInfo_Results_List(s *capnp.Segment, sz int32) (PactusServer_getBlockchainInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PactusServer_getBlockchainInfo_Results_List{l}, err
}

func (s PactusServer_getBlockchainInfo_Results_List) At(i int) PactusServer_getBlockchainInfo_Results {
	return PactusServer_getBlockchainInfo_Results{s.List.Struct(i)}
}

func (s PactusServer_getBlockchainInfo_Results_List) Set(i int, v PactusServer_getBlockchainInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getBlockchainInfo_Results_List) String() string {
	str, _ := text.MarshalList(0x9ddf8c9e87a562a9, s.List)
	return str
}

// PactusServer_getBlockchainInfo_Results_Promise is a wrapper for a PactusServer_getBlockchainInfo_Results promised by a client call.
type PactusServer_getBlockchainInfo_Results_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getBlockchainInfo_Results_Promise) Struct() (PactusServer_getBlockchainInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getBlockchainInfo_Results{s}, err
}

func (p PactusServer_getBlockchainInfo_Results_Promise) Result() BlockchainInfoResult_Promise {
	return BlockchainInfoResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PactusServer_getNetworkInfo_Params struct{ capnp.Struct }

// PactusServer_getNetworkInfo_Params_TypeID is the unique identifier for the type PactusServer_getNetworkInfo_Params.
const PactusServer_getNetworkInfo_Params_TypeID = 0xf8e58321495ea693

func NewPactusServer_getNetworkInfo_Params(s *capnp.Segment) (PactusServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PactusServer_getNetworkInfo_Params{st}, err
}

func NewRootPactusServer_getNetworkInfo_Params(s *capnp.Segment) (PactusServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PactusServer_getNetworkInfo_Params{st}, err
}

func ReadRootPactusServer_getNetworkInfo_Params(msg *capnp.Message) (PactusServer_getNetworkInfo_Params, error) {
	root, err := msg.RootPtr()
	return PactusServer_getNetworkInfo_Params{root.Struct()}, err
}

func (s PactusServer_getNetworkInfo_Params) String() string {
	str, _ := text.Marshal(0xf8e58321495ea693, s.Struct)
	return str
}

// PactusServer_getNetworkInfo_Params_List is a list of PactusServer_getNetworkInfo_Params.
type PactusServer_getNetworkInfo_Params_List struct{ capnp.List }

// NewPactusServer_getNetworkInfo_Params creates a new list of PactusServer_getNetworkInfo_Params.
func NewPactusServer_getNetworkInfo_Params_List(s *capnp.Segment, sz int32) (PactusServer_getNetworkInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PactusServer_getNetworkInfo_Params_List{l}, err
}

func (s PactusServer_getNetworkInfo_Params_List) At(i int) PactusServer_getNetworkInfo_Params {
	return PactusServer_getNetworkInfo_Params{s.List.Struct(i)}
}

func (s PactusServer_getNetworkInfo_Params_List) Set(i int, v PactusServer_getNetworkInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getNetworkInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xf8e58321495ea693, s.List)
	return str
}

// PactusServer_getNetworkInfo_Params_Promise is a wrapper for a PactusServer_getNetworkInfo_Params promised by a client call.
type PactusServer_getNetworkInfo_Params_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getNetworkInfo_Params_Promise) Struct() (PactusServer_getNetworkInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getNetworkInfo_Params{s}, err
}

type PactusServer_getNetworkInfo_Results struct{ capnp.Struct }

// PactusServer_getNetworkInfo_Results_TypeID is the unique identifier for the type PactusServer_getNetworkInfo_Results.
const PactusServer_getNetworkInfo_Results_TypeID = 0xe81f9cad31fab5f3

func NewPactusServer_getNetworkInfo_Results(s *capnp.Segment) (PactusServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getNetworkInfo_Results{st}, err
}

func NewRootPactusServer_getNetworkInfo_Results(s *capnp.Segment) (PactusServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getNetworkInfo_Results{st}, err
}

func ReadRootPactusServer_getNetworkInfo_Results(msg *capnp.Message) (PactusServer_getNetworkInfo_Results, error) {
	root, err := msg.RootPtr()
	return PactusServer_getNetworkInfo_Results{root.Struct()}, err
}

func (s PactusServer_getNetworkInfo_Results) String() string {
	str, _ := text.Marshal(0xe81f9cad31fab5f3, s.Struct)
	return str
}

func (s PactusServer_getNetworkInfo_Results) Result() (NetworkInfoResult, error) {
	p, err := s.Struct.Ptr(0)
	return NetworkInfoResult{Struct: p.Struct()}, err
}

func (s PactusServer_getNetworkInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getNetworkInfo_Results) SetResult(v NetworkInfoResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated NetworkInfoResult struct, preferring placement in s's segment.
func (s PactusServer_getNetworkInfo_Results) NewResult() (NetworkInfoResult, error) {
	ss, err := NewNetworkInfoResult(s.Struct.Segment())
	if err != nil {
		return NetworkInfoResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PactusServer_getNetworkInfo_Results_List is a list of PactusServer_getNetworkInfo_Results.
type PactusServer_getNetworkInfo_Results_List struct{ capnp.List }

// NewPactusServer_getNetworkInfo_Results creates a new list of PactusServer_getNetworkInfo_Results.
func NewPactusServer_getNetworkInfo_Results_List(s *capnp.Segment, sz int32) (PactusServer_getNetworkInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PactusServer_getNetworkInfo_Results_List{l}, err
}

func (s PactusServer_getNetworkInfo_Results_List) At(i int) PactusServer_getNetworkInfo_Results {
	return PactusServer_getNetworkInfo_Results{s.List.Struct(i)}
}

func (s PactusServer_getNetworkInfo_Results_List) Set(i int, v PactusServer_getNetworkInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getNetworkInfo_Results_List) String() string {
	str, _ := text.MarshalList(0xe81f9cad31fab5f3, s.List)
	return str
}

// PactusServer_getNetworkInfo_Results_Promise is a wrapper for a PactusServer_getNetworkInfo_Results promised by a client call.
type PactusServer_getNetworkInfo_Results_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getNetworkInfo_Results_Promise) Struct() (PactusServer_getNetworkInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getNetworkInfo_Results{s}, err
}

func (p PactusServer_getNetworkInfo_Results_Promise) Result() NetworkInfoResult_Promise {
	return NetworkInfoResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PactusServer_getConsensusInfo_Params struct{ capnp.Struct }

// PactusServer_getConsensusInfo_Params_TypeID is the unique identifier for the type PactusServer_getConsensusInfo_Params.
const PactusServer_getConsensusInfo_Params_TypeID = 0xa813e92fe7395369

func NewPactusServer_getConsensusInfo_Params(s *capnp.Segment) (PactusServer_getConsensusInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PactusServer_getConsensusInfo_Params{st}, err
}

func NewRootPactusServer_getConsensusInfo_Params(s *capnp.Segment) (PactusServer_getConsensusInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PactusServer_getConsensusInfo_Params{st}, err
}

func ReadRootPactusServer_getConsensusInfo_Params(msg *capnp.Message) (PactusServer_getConsensusInfo_Params, error) {
	root, err := msg.RootPtr()
	return PactusServer_getConsensusInfo_Params{root.Struct()}, err
}

func (s PactusServer_getConsensusInfo_Params) String() string {
	str, _ := text.Marshal(0xa813e92fe7395369, s.Struct)
	return str
}

// PactusServer_getConsensusInfo_Params_List is a list of PactusServer_getConsensusInfo_Params.
type PactusServer_getConsensusInfo_Params_List struct{ capnp.List }

// NewPactusServer_getConsensusInfo_Params creates a new list of PactusServer_getConsensusInfo_Params.
func NewPactusServer_getConsensusInfo_Params_List(s *capnp.Segment, sz int32) (PactusServer_getConsensusInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PactusServer_getConsensusInfo_Params_List{l}, err
}

func (s PactusServer_getConsensusInfo_Params_List) At(i int) PactusServer_getConsensusInfo_Params {
	return PactusServer_getConsensusInfo_Params{s.List.Struct(i)}
}

func (s PactusServer_getConsensusInfo_Params_List) Set(i int, v PactusServer_getConsensusInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getConsensusInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xa813e92fe7395369, s.List)
	return str
}

// PactusServer_getConsensusInfo_Params_Promise is a wrapper for a PactusServer_getConsensusInfo_Params promised by a client call.
type PactusServer_getConsensusInfo_Params_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getConsensusInfo_Params_Promise) Struct() (PactusServer_getConsensusInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getConsensusInfo_Params{s}, err
}

type PactusServer_getConsensusInfo_Results struct{ capnp.Struct }

// PactusServer_getConsensusInfo_Results_TypeID is the unique identifier for the type PactusServer_getConsensusInfo_Results.
const PactusServer_getConsensusInfo_Results_TypeID = 0xec6734738efb7faf

func NewPactusServer_getConsensusInfo_Results(s *capnp.Segment) (PactusServer_getConsensusInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getConsensusInfo_Results{st}, err
}

func NewRootPactusServer_getConsensusInfo_Results(s *capnp.Segment) (PactusServer_getConsensusInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_getConsensusInfo_Results{st}, err
}

func ReadRootPactusServer_getConsensusInfo_Results(msg *capnp.Message) (PactusServer_getConsensusInfo_Results, error) {
	root, err := msg.RootPtr()
	return PactusServer_getConsensusInfo_Results{root.Struct()}, err
}

func (s PactusServer_getConsensusInfo_Results) String() string {
	str, _ := text.Marshal(0xec6734738efb7faf, s.Struct)
	return str
}

func (s PactusServer_getConsensusInfo_Results) Result() (ConsensusInfoResult, error) {
	p, err := s.Struct.Ptr(0)
	return ConsensusInfoResult{Struct: p.Struct()}, err
}

func (s PactusServer_getConsensusInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_getConsensusInfo_Results) SetResult(v ConsensusInfoResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated ConsensusInfoResult struct, preferring placement in s's segment.
func (s PactusServer_getConsensusInfo_Results) NewResult() (ConsensusInfoResult, error) {
	ss, err := NewConsensusInfoResult(s.Struct.Segment())
	if err != nil {
		return ConsensusInfoResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PactusServer_getConsensusInfo_Results_List is a list of PactusServer_getConsensusInfo_Results.
type PactusServer_getConsensusInfo_Results_List struct{ capnp.List }

// NewPactusServer_getConsensusInfo_Results creates a new list of PactusServer_getConsensusInfo_Results.
func NewPactusServer_getConsensusInfo_Results_List(s *capnp.Segment, sz int32) (PactusServer_getConsensusInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PactusServer_getConsensusInfo_Results_List{l}, err
}

func (s PactusServer_getConsensusInfo_Results_List) At(i int) PactusServer_getConsensusInfo_Results {
	return PactusServer_getConsensusInfo_Results{s.List.Struct(i)}
}

func (s PactusServer_getConsensusInfo_Results_List) Set(i int, v PactusServer_getConsensusInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_getConsensusInfo_Results_List) String() string {
	str, _ := text.MarshalList(0xec6734738efb7faf, s.List)
	return str
}

// PactusServer_getConsensusInfo_Results_Promise is a wrapper for a PactusServer_getConsensusInfo_Results promised by a client call.
type PactusServer_getConsensusInfo_Results_Promise struct{ *capnp.Pipeline }

func (p PactusServer_getConsensusInfo_Results_Promise) Struct() (PactusServer_getConsensusInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_getConsensusInfo_Results{s}, err
}

func (p PactusServer_getConsensusInfo_Results_Promise) Result() ConsensusInfoResult_Promise {
	return ConsensusInfoResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PactusServer_sendRawTransaction_Params struct{ capnp.Struct }

// PactusServer_sendRawTransaction_Params_TypeID is the unique identifier for the type PactusServer_sendRawTransaction_Params.
const PactusServer_sendRawTransaction_Params_TypeID = 0x95a22d24c4235b55

func NewPactusServer_sendRawTransaction_Params(s *capnp.Segment) (PactusServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_sendRawTransaction_Params{st}, err
}

func NewRootPactusServer_sendRawTransaction_Params(s *capnp.Segment) (PactusServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_sendRawTransaction_Params{st}, err
}

func ReadRootPactusServer_sendRawTransaction_Params(msg *capnp.Message) (PactusServer_sendRawTransaction_Params, error) {
	root, err := msg.RootPtr()
	return PactusServer_sendRawTransaction_Params{root.Struct()}, err
}

func (s PactusServer_sendRawTransaction_Params) String() string {
	str, _ := text.Marshal(0x95a22d24c4235b55, s.Struct)
	return str
}

func (s PactusServer_sendRawTransaction_Params) RawTx() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PactusServer_sendRawTransaction_Params) HasRawTx() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_sendRawTransaction_Params) SetRawTx(v []byte) error {
	return s.Struct.SetData(0, v)
}

// PactusServer_sendRawTransaction_Params_List is a list of PactusServer_sendRawTransaction_Params.
type PactusServer_sendRawTransaction_Params_List struct{ capnp.List }

// NewPactusServer_sendRawTransaction_Params creates a new list of PactusServer_sendRawTransaction_Params.
func NewPactusServer_sendRawTransaction_Params_List(s *capnp.Segment, sz int32) (PactusServer_sendRawTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PactusServer_sendRawTransaction_Params_List{l}, err
}

func (s PactusServer_sendRawTransaction_Params_List) At(i int) PactusServer_sendRawTransaction_Params {
	return PactusServer_sendRawTransaction_Params{s.List.Struct(i)}
}

func (s PactusServer_sendRawTransaction_Params_List) Set(i int, v PactusServer_sendRawTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_sendRawTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0x95a22d24c4235b55, s.List)
	return str
}

// PactusServer_sendRawTransaction_Params_Promise is a wrapper for a PactusServer_sendRawTransaction_Params promised by a client call.
type PactusServer_sendRawTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p PactusServer_sendRawTransaction_Params_Promise) Struct() (PactusServer_sendRawTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_sendRawTransaction_Params{s}, err
}

type PactusServer_sendRawTransaction_Results struct{ capnp.Struct }

// PactusServer_sendRawTransaction_Results_TypeID is the unique identifier for the type PactusServer_sendRawTransaction_Results.
const PactusServer_sendRawTransaction_Results_TypeID = 0x81a2a8ca5653a23a

func NewPactusServer_sendRawTransaction_Results(s *capnp.Segment) (PactusServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_sendRawTransaction_Results{st}, err
}

func NewRootPactusServer_sendRawTransaction_Results(s *capnp.Segment) (PactusServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PactusServer_sendRawTransaction_Results{st}, err
}

func ReadRootPactusServer_sendRawTransaction_Results(msg *capnp.Message) (PactusServer_sendRawTransaction_Results, error) {
	root, err := msg.RootPtr()
	return PactusServer_sendRawTransaction_Results{root.Struct()}, err
}

func (s PactusServer_sendRawTransaction_Results) String() string {
	str, _ := text.Marshal(0x81a2a8ca5653a23a, s.Struct)
	return str
}

func (s PactusServer_sendRawTransaction_Results) Result() (SendTransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return SendTransactionResult{Struct: p.Struct()}, err
}

func (s PactusServer_sendRawTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PactusServer_sendRawTransaction_Results) SetResult(v SendTransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated SendTransactionResult struct, preferring placement in s's segment.
func (s PactusServer_sendRawTransaction_Results) NewResult() (SendTransactionResult, error) {
	ss, err := NewSendTransactionResult(s.Struct.Segment())
	if err != nil {
		return SendTransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PactusServer_sendRawTransaction_Results_List is a list of PactusServer_sendRawTransaction_Results.
type PactusServer_sendRawTransaction_Results_List struct{ capnp.List }

// NewPactusServer_sendRawTransaction_Results creates a new list of PactusServer_sendRawTransaction_Results.
func NewPactusServer_sendRawTransaction_Results_List(s *capnp.Segment, sz int32) (PactusServer_sendRawTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PactusServer_sendRawTransaction_Results_List{l}, err
}

func (s PactusServer_sendRawTransaction_Results_List) At(i int) PactusServer_sendRawTransaction_Results {
	return PactusServer_sendRawTransaction_Results{s.List.Struct(i)}
}

func (s PactusServer_sendRawTransaction_Results_List) Set(i int, v PactusServer_sendRawTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PactusServer_sendRawTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0x81a2a8ca5653a23a, s.List)
	return str
}

// PactusServer_sendRawTransaction_Results_Promise is a wrapper for a PactusServer_sendRawTransaction_Results promised by a client call.
type PactusServer_sendRawTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p PactusServer_sendRawTransaction_Results_Promise) Struct() (PactusServer_sendRawTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return PactusServer_sendRawTransaction_Results{s}, err
}

func (p PactusServer_sendRawTransaction_Results_Promise) Result() SendTransactionResult_Promise {
	return SendTransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_84b56bd0975dfd33 = "x\xda\xbcX}p\x14w\xf9\x7f\x9e\xdd\xbb\xdb4o" +
	"w\xdb\xbd\xfb\xf1k\xacs\xb6\x06\x85\x0c\x01\x92\xc0X" +
	"\xe2\xcbA\x80\x92D\xa2\xb7w\x80%\x82\xb2\xc9}I" +
	"\xaeIn\xcf\xddMBj\x99\x08\x94i\xc1\xb6S\xc5" +
	"L\xb1c\x94\x17eH\x15\xb0\xb5T\xe2\x98q\xa8L" +
	"k\xab\x1d\xa4c\xa7\xa2\xa5\x0a\x1d\xe4\xc5:#t\xac" +
	"\xa5\x0e=\xe7\xd9\xbb}\xb9#\x09I\x1d\xfd\xef\xee\xd9" +
	"g\x9f\xe7\xf9>/\x9f\xe7\xb3\xdf\xf9\xff',\xe6j" +
	"\xbc_.\x01\x90\x1f\xf0\xfa2\xf5\xfb\xe2k^:\xb8" +
	"o\x0b\x88\x95\x08\xe0E\x01\xa0n\xc8\xfb\x1e\x02J#" +
	"\xde\x08`\xe6\xe2\xb5\x87\xd7\xfa\"\xc1m \xcf@\xcc" +
	"\xd4]_\xff\xf8o\xbb\x8e>\x00^\x9e4_\xf4V" +
	"\xa0t\xda+\x00H\xafz/\x00f\x96\x96,X\xfd" +
	"\x9b\xd7\xe6>\xe867\xe2\xfb\x19\x99\x1b\xf5\x91\xb9\xaf" +
	"\xbe\x1f\xfc\xbd^6\xfa\x10\xc8\x95hk\x9c\xf6=M" +
	"\x1a\x97|\xfd\x80\x99\xbf?\xb9{\xf0\xe8\xebo<Z" +
	"\xe8\xd0C^\x9a\x84\xab\xd2j\x81\xde\x91\x85/ `" +
	"f\xe4c\xe7n\xdf\xbd\xfe\xcd] \xce\xe0\x1de\xc0" +
	"\xbaCEw\xa24VD\xaa\xa3E+8I.\x16" +
	"\x002\xab\xbf\xf8\xd1\x13\x95\xd5\xfb\x86\xdc\xf1-*\xbe" +
	"J\xde[\x8a)\xbe_\xbf8\xb6\xf7\xf0\xa9\xf4\xe3 " +
	"\xcep;\xe7H\xb1\xa7\xb8\x19\xa5-dG\xda\\L" +
	"\xa1\x8e\xb4\xfd\xe0\xc1\xef>\xfc\xa7a\xb7\xb5KYk" +
	"\xd7Mk\xdf\xf3\xb65\x9d\x19\x08\xedu+|\xb8\xe4" +
	"IR\xa8.!\x85\x9f\xbey\xf8\x97\xef~h\xd3\xbe" +
	"\xbct\xb4\x94\xbcB\x1aJ\x09\xf9\x98\x11-\xfe\xcc\xeb" +
	"-c\xfb\x0b\x022\x15\x8f\x97T\xa1t\xaa\x84\x02z" +
	"\xd94\x97\x8c/\xba0\xef\x92t0\xeb\x8f2V\xf7" +
	"\xb7\x92s\x08\x9e\xccS\xa1wf\xa9\xec\xf8H\x9e\xa3" +
	"\xb3%\xcf\x91\xa3+\xa6\xa3\xcc\xce\xc7>\xde\xf4\xd8\x13" +
	"?,\xcc;\x1d]\x92K\xcfI\xebK\xe9\xd7\xdaR" +
	"\xaa\xf3\x8e=\xbf\xd0W\xfcs\xd1\xe1\xf1\x94\xebj\xca" +
	"\xdaPZ^F\xdaK\xca\x8e\x00f\x16\xfe\xa5\xe3\xfc" +
	"m\xca\xd03\xee4\x9c/{\x89|_+\xa3\xb8\xd7" +
	"=\xfb\xc7mW\xcb\x86\x8f\x919\xae\xf0\x94\xb7\x95\x17" +
	"\xa34\xbb\x9c\xcc\xcd,'s\xcbJ\x07\xd5\xeb\xbb\xde" +
	">V\x90\x12\xeaH\xe9t\xf9e\xe9\xbc\xa9{\xd6\xd4" +
	"\xed|\xf6\xfd\xe0\xed\x9f\xe8\x1f\x1bG\xb7\xee\x11\x7f3" +
	"J{\xfd\xa4<\xec'e\xe9'#\xf3W\x84\xbeq" +
	"\"/I\x8b\x02\xfb(\xd0\xa6\x00%i\x8f\xb7\xef\xe0" +
	"\xc5\xad\xfb\x9f\xcf\xeb\xef\x80y\x92\xb1\x00\x9d$^y" +
	"\xffC\x9e_}\xf2\x05W\x05\xce\x04.S\x052\xe2" +
	"\x81\xd6\x8a\xdf\xfd\xf5\x85\x9cq\xf3\xd1\xa9\x80Y\x80\xb3" +
	"\xe6\xab\xcdU\xcf?=\xeay\xeddaNM'(" +
	"\xde\x8bRH\xa4XE\x91\"\xb9r*84\xf7\x8e" +
	"+g\xc6\xd5\xee\x11[Q\xdabjo\x16\xe9d\x11" +
	"\xef\xe7{/\x9c\x1c}\x83\xb4=\x85C5\xf3\xd6s" +
	"R\xcd\xad\xf4^\xf5\xad*\x07\x98\x19>\xf0\\\xe2d" +
	"\xe2\x9d?\xbbO9\x16\xfc\x03\x85z*H\xa1\xbe}" +
	"\xf4\xbd\x9aC\xdf\x09_t+\\\xc9*xC\xa4\xb0" +
	"?\xf3\xf5\xc3\x8fl\xbd\xfd\xad\xf1\xbavf\xa8\x1e\xa5" +
	"\x85!\xf2\\c*\x1f\x19\xfc\xd7\xa3\xfa\x82\x8e\xb7\xdc" +
	"\xd6\xe4\xd0e\xb2\xc6L\x85]\x07\xbe\xd4t\xc7\xb6\xf3" +
	"\xef\xba\x92\xba=\xf4\x0a%\xb5$\xb4a\xe8\xc8\xddw" +
	"_\x1b\x17\x9d\x06B\x15(\xed0\x1dm\x0fQ\xd7\xf6" +
	"\xf7\xf7\xcfkW\xd2)_z^Zi7z\xf5\xb9" +
	"\xf4/]\x1f5\xff\xc4\x99\xd6\xc7\xb4\xb9:K%b" +
	"J\xff*MI\xe9J\xbb\x91TS\x95\xb1\x08\xd3{" +
	"\xbb\x0d]\xf6\xf0\x1e\x00\x0f\x02\x88e\xf5\x00r\x11\x8f" +
	"r\x90\xc3\x88f>\xc6\x80SB@\x0c\xb8\x1c\xf2\x05" +
	"\x0e\x1b\xba\xd5\xf6\xae\x18\xd3{\xf9n#\x8a(\x07l" +
	"\xbb\x0a\xd9]\xc7\xa3\xdc\xc9!b\x90:EdU\x00" +
	"\xf2\x06\x1e\xe5n\x0eE\x0e\x83\xc8\x01\x88\xc9Z\x009" +
	"\xc1\xa3\x9c\xe6P\xe4\xb9 \xf2\x00b\x0fiv\xf2(" +
	"\x1b\x1cF:Y\xb2\xa3\xd3\xc0\"\xe0\xb0\x08\xd0\xdf\xa9" +
	"\xe8\x9dX\x06\x1c\x96\x01\x86\xdb(\x00\x0c8\xa3\x94\x0d" +
	"\xd8\x9fP\x0c\xc5R\xb2\xa3\xf7N\x96\xae\x0ef,i" +
	"oW{S\xc6\xd4\xd3dcZA\x9a\xa6\xea(\x1a" +
	"V4\xa5G\x97\x8bl?\xb3\x1b\x00\xe4J\x1e\xe5\xf9" +
	"N\xda\xaac\x00\xf2\x1c\x1e\xe5\xbb8\x1cT\x12\x09\x8d" +
	"\xe9:\x96\x02\x87\xa5\x80\x99>\xa6\xb5\xa9z\xd2\x00\x1c" +
	"@\x0fp\xe8q\x85\xc1\x15\x84\xd1\x18fJ\x82iT" +
	"\xa8\xff\xb7=~\x9b<~\x8bGy\x0f\x87\xa2\xe5r" +
	"\x98\xf2\xbf\x9bG\xf9\xfb\x1c\"\x97-\xd4^\x0d@\xde" +
	"\xc3\xa3\xfc#*\x14f\x0b5B\xb1\x1d\xe4Q~\x86" +
	"C\xd1\xc3\x05\xd1\x03 >E\x9a?\xe6Q\xfe9\x87" +
	"\xa2\x97\x0f\xa2\x17@\x1c\xdd\x0a \x1f\xe3Q>\xc1\xe1" +
	"`\x1f\xd3\xf4\xa4\x9aB\x1fp\xe8\x03\xf4\x1b\xc9\x1ef" +
	"\x87\x9f\xd6X\x1f5\x16\x84\xbb\x1a]\xb5\xce\xe8\x86b" +
	"\xb0\x98\xaa\x02\x1a\x8eL\xd5\x8c\xa4\x91T!\x9c\x8a3" +
	"\x96\xb0\xe5iMM\xab:\xd3pI6_`'l" +
	"\xa2V\xb6k$\xf4eST\xc9{\x01l(Ek" +
	"\x05J\"6\x03'\xdd\x82\x02\xa2\x8d\x85hm\x06\xf1" +
	"\xfa\xbd\xc0\x89\xff\x10\x90\xb3W\"Z($^\xba\x0f" +
	"8\xf1\xac\x80\xbc\xcd\x1e\xd0\xe2\x19\xe2\xab\xad\xc0\x89/" +
	"\x0b\xe8l8\xb40Z<N6G\x05\xf4\xda\xa8\x8c" +
	"\xd6\xc6\x16\x0f}\x138qD@\x9f\x0d.h\x81\x9a" +
	"8L\xfe\x86\x04\x14\xec}\x8a\x16D\x89;v\x02'" +
	"n\x17\xb0\xc8\xa6\x12hQ(q\xe0\x09\xe0\xc4^!" +
	"\xd3\xc1\x0cs\xc0\x01`1:\xff\xfcT\x95\xac\xc0\x04" +
	"\x17\x88d\xe1%+2{\x1b\xf8\x94\x91\xfd\xbbF\xe9" +
	"N&\xc0\xaf\x18\xaa\xe6\xb2\x81\xed\x9dJ2\xd5\x94\xda" +
	"\x88jV\xfa9f\xf4\xab\x10\xd1\xba\x9aR\x1bs\xa2" +
	"\xa5jJg\x98\xd2{u\x92\x99!X\x90\x86\x16\xa6" +
	"\xf1\xe45\x8a\x1f\x1c\x11\xad\x09tMz\xad3\xe9a" +
	"M\xe9_\xb5\xe9\x06\x1c\xf1\x1481\x83\xcf\x86\x1e3" +
	"\xa1\x01\x80\x1a\xc85\xd5\xf5\xceT\xdb3VM\x8ef" +
	"\xf1(/\xe30\x92fLkZf5i\x98\xfe\xea" +
	"X\x0e\x18\xe5\x11\x03\xce\xd6\x03$\xe1\xd4Nk\xe5\xda" +
	"J\xb5Z\x19c\xe1\xa9\xe1\x9a\xcd\x8a\xa6\x89k\xa6\xbf" +
	"\xca\x18\xd3\xfdSrcS\xf2\x0277;V^\x01" +
	"\xa9~\x98\x07\xa1\x15\x93C(\x9ft`b2\xf4," +
	"\x04\x88\x1ch\xc7\x98\x9f\xc2\xa7\x02\xbb\xceW\xe5\x9co" +
	"\xfc\xdds\xb33\x99\xddn5;\x9dJPz\xf4)" +
	"\xbfmN\x19\xcdX6\x1f:\xfc\xafV\xca\x1aA5" +
	"X\xc1\xe6\xaf\x1ag\xf3\xd7\x8e\xb7\xf9c\xce\x92\xb7\x17" +
	"\xcaWH\xb3\x9bGy\x13\x87~c \xcd\x90\x03\x0e" +
	"9\xc0p\x9fj0\xcd\x0e\xd2\\\xfc\x8d\x8a\x0e\xe8\x90" +
	"\x01M\xedM%\x90\x07\x0e\xf9I\xa65\x7f(bL" +
	"\x17r\xe5,\xb5\x8f\xb0\x9cv\xd52\x1e\xe5\xa8s\x84" +
	"\x16Zj+y\x94\xefq\x1da5\x1da\x15\x8f\xf2" +
	"\x06\x0e3\xdd\x8anN\x00v5\x9a\x8c\x05,\xcab" +
	"?)\xdch\xedjOO\xd20\x18 \xc3\x80\xf3\xf1" +
	"0\xcdqh\xc8\xa5\xa2\xb32\x8b>:\xc0MF\xaf" +
	"\xb09\x0b[}i..\x96\x052WbZ\x9d\xc4" +
	"\xd8@\xd6r\x9f\x93\x19\x8b,\xacn\xcd%&\xcda" +
	"\xc6P\x0d\xa5;\xaa\xf6\x03\xcf4\xf4\x02\x87^\xf7\xd9" +
	"#,\xaa\xf6\xbb\x1e\xf4\xe5z\x19x7\x04\xdaD\xbc" +
	"\x00\x02\x0b\x1b\xb2\xc1O\xd9(\x88\x9aR\xb0\x98Gy" +
	"\xa5+\xea\xa6f\x00\xb9\x91Gy\x15\xd53\x17\xb6|" +
	"g\xee(\x9d&\xef$\xb6\x84\x01\xe7K>W\x18\"" +
	"(K\x99f\x00\x00\x06\x1c\xea\x9e}*\x18\x9b\xec\xb0" +
	")\xcf\xe5\x93\xb4\xa2\x0b\xc8\xdc\x8b\xc3\x15y\xc5x\x91" +
	"W\xb9\x8a`E\xde\xd2\xe6\x14\xc1\x85p\xf9`d\xe4" +
	"\xfc\x81@\xe4k\xba\xf48\x8b\xee9hr\x03L\xd5" +
	"\xe4\x00\x93\xc7\xd8'E\x97\xa9\xc3\xdcT;=\xbfq" +
	"\x02\x1f|wF\x15\xbf6\x1dDv\x86\xd2B\xe4\x09" +
	"\x02\xcd\xff\xba\x99\xb0U\xe2,\x95\xc8k\x17{\x0b\x8d" +
	"O3\xecBT\xe4X\xc6\x02\x0e#\xc4\xa0{u+" +
	"\xed\xeeE8\x91\xdb\xbc\xb5\xe4\xfa\xd0\x9bh\xb8\xb8\\" +
	"\x8b\xd6\xba\x00\xd4\xea\xd0\xda\xdc\xc0%n8u>r" +
	"\x9bH\xef\x1a}\xfbB\xe7&\xa3\x1f\x15X\x96\xb9\xcf" +
	"\xb1\x82\x93fb=@\xfc#\xc8c|\x0e\xdaI\x91" +
	"fc\x03@\xbc\x92\xc4\xf3\xd1\x81s\xa9\x1ak\x01\xe2" +
	"\xb3H\xbe\x00\x9d\xcfQ\xa9\xc643\x87\xe4w\x91\xdc" +
	"\xc3\x9b\x1f:\xd2B\x8c\x01\xc4\x17\x90|1\xc9\xbdh" +
	"~\xebH\x9f\xc6f\x80\xf8\xa7H\xdeHr\x1f\x17D" +
	"\x1f\x80\xb4\xdc\xb4\xbf\x98\xe4+I.\xf0A4o\x03" +
	"M\xfb\xcbH\x1e%y\x91'\x88E\x00R\x0b\xee\x04" +
	"\x88GI\xbe\x8e\xe4\xb7x\x83x\x0b\x80\xb4\x16\xb7\x02" +
	"\xc4\xef!y\x82\xe4\xc5\xbe \x16\x03H\x0aj\x00\xf1" +
	"\x0d$\xef\xc6\x1b\xea=\xd8\xa3\xa6\x92]\xce\x0e\x0d+" +
	"\x1d,eX\xff\x0a(h&\xdd\xdb\xd6\x9dl\xff," +
	"\xa39\xb5d\xb4\xc7\xe2\x8c\xa5\x08\xf8rF\xc3\x1b\xbb" +
	"\x95\x0e\xdbEa7k\xac\x9d%\xfbX\x02[\x98\xae" +
	"+\x1dLw^\xcc$S&\xd2\xb7\xa0\xf5\xc8~b" +
	"\xbd\x05\xe1\x86\x01\xea\x84\xe9\xc2D\xde\x95\x07\xe1\x00?" +
	"\x052j_\xb0M\x13'\\\xe4\x7f\xea\xce\xec\xdb\xd9" +
	"\x9b\xdc\xaf\xd8\x80\x17\xc9\x02\xde\x7f\x97uN\x99\xb8\xdb" +
	"wv\xffA\xaer\xc4}b\x0e\xc24#\xb91\xd9" +
	"\xae\xf07\x10\xcc\xdaq\x08fk\xee\x16\xe9k.v" +
	"\xb6\x99\x96\xd0\xfd<\xca\xbb]WKC1\xe7\xbe\xa3" +
	"\x801\xda\x94\xc4\xc5<<\xb9\x15\xae\xb4\xe9,E\x8c" +
	"\x08ox\xa4';R\x8a\xd1\xab\x11\x8b\xcb\x15\xe0\xdf" +
	"\x01\x00\x00\xff\xff`pq\xc5"

func init() {
	schemas.Register(schema_84b56bd0975dfd33,
		0x81a2a8ca5653a23a,
		0x83143f06598cf9e8,
		0x872ed7cc55340b43,
		0x88b90d73d814fe7b,
		0x8ededcb57f98aaf0,
		0x93e35d981ce226a9,
		0x95a22d24c4235b55,
		0x9770d1aea1bdc9cb,
		0x9ddf8c9e87a562a9,
		0xa11579dd4962059f,
		0xa2781bf8c3aee3b7,
		0xa3bd4ddc3e0a5017,
		0xa813e92fe7395369,
		0xa9c1656f28f615b1,
		0xab9a904927908aff,
		0xae39f74773bfa089,
		0xb4956119e567e635,
		0xb89d0df283dbb65c,
		0xb8f393fd6f7f0c44,
		0xbd77371c14feb668,
		0xc491154730a9b313,
		0xc6a382e8a87605a0,
		0xc73bc804887c2453,
		0xc7ebd41a5aa611ff,
		0xcfd704b9b2c62a4a,
		0xddf1212e9514d1f1,
		0xdeb9cfe7754f053f,
		0xe0f664cf64c2a69d,
		0xe81f9cad31fab5f3,
		0xec1c828dae8bffa3,
		0xec6734738efb7faf,
		0xf8e58321495ea693,
		0xf94646af9560150b)
}
