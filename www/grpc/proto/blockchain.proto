syntax = 'proto3';
package pactus;

option go_package = "github.com/pactus-project/pactus/www/grpc/pactus";
option java_package = "pactus.blockchain";

import "transaction.proto";

service Blockchain {
  rpc GetBlock(BlockRequest) returns (BlockResponse);
  rpc GetBlockHash(BlockHashRequest) returns (BlockHashResponse);
  rpc GetBlockHeight(BlockHeightRequest) returns (BlockHeightResponse);
  rpc GetAccount(AccountRequest) returns (AccountResponse);
  rpc GetValidators(ValidatorsRequest) returns (ValidatorsResponse);
  rpc GetValidator(ValidatorRequest) returns (ValidatorResponse);
  rpc GetValidatorByNumber(ValidatorByNumberRequest) returns (ValidatorResponse);
  rpc GetBlockchainInfo(BlockchainInfoRequest) returns (BlockchainInfoResponse);
}

message AccountRequest { string address = 1; }

message AccountResponse { AccountInfo account = 1; }

message ValidatorsRequest {}

message ValidatorRequest { string address = 1; }
message ValidatorByNumberRequest { int32 number = 1; }

message ValidatorsResponse { repeated ValidatorInfo validators = 1; }

message ValidatorResponse { ValidatorInfo validator = 1; }

message BlockRequest {
  uint32 height = 1;
  BlockVerbosity verbosity = 2;
}

message BlockResponse {
  uint32 height = 1;
  bytes hash = 2;
  bytes data = 3;
  uint32 block_time = 4;
  BlockHeaderInfo header = 5;
  CertificateInfo prev_cert = 6;
  repeated TransactionInfo txs = 7;
}

message BlockHashRequest { uint32 height = 1; }

message BlockHashResponse { bytes hash = 1; }

message BlockHeightRequest { bytes hash = 1; }

message BlockHeightResponse { uint32 height = 1; }

message BlockchainInfoRequest {}

message BlockchainInfoResponse {
  uint32 last_block_height = 1;
  bytes last_block_hash = 2;
}

message ValidatorInfo {
  string public_key = 1;
  int32 number = 2;
  int32 sequence = 3;
  int64 stake = 4;
  uint32 last_bonding_height = 5;
  uint32 last_joined_height = 6;
  uint32 unbonding_height = 7;
  string address = 8;
}

message AccountInfo {
  string address = 1;
  int32 number = 2;
  int32 sequence = 3;
  int64 Balance = 4;
}

message BlockHeaderInfo {
  int32 version = 1;
  bytes prev_block_hash = 2;
  bytes state_root = 3;
  bytes sortition_seed = 4;
  string proposer_address = 5;
}

message CertificateInfo {
  int32 round = 1;
  repeated int32 committers = 2;
  repeated int32 absentees = 3;
  bytes signature = 4;
}

enum BlockVerbosity {
  BLOCK_DATA = 0;
  BLOCK_INFO = 1;
  BLOCK_TRANSACTIONS = 2;
}
