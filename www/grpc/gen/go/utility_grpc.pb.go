// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: utility.proto

package pactus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UtilityClient is the client API for Utility service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtilityClient interface {
	// CalculateFee calculates the transaction fee based on the specified amount
	// and payload type.
	CalculateFee(ctx context.Context, in *CalculateFeeRequest, opts ...grpc.CallOption) (*CalculateFeeResponse, error)
}

type utilityClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilityClient(cc grpc.ClientConnInterface) UtilityClient {
	return &utilityClient{cc}
}

func (c *utilityClient) CalculateFee(ctx context.Context, in *CalculateFeeRequest, opts ...grpc.CallOption) (*CalculateFeeResponse, error) {
	out := new(CalculateFeeResponse)
	err := c.cc.Invoke(ctx, "/pactus.Utility/CalculateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilityServer is the server API for Utility service.
// All implementations should embed UnimplementedUtilityServer
// for forward compatibility
type UtilityServer interface {
	// CalculateFee calculates the transaction fee based on the specified amount
	// and payload type.
	CalculateFee(context.Context, *CalculateFeeRequest) (*CalculateFeeResponse, error)
}

// UnimplementedUtilityServer should be embedded to have forward compatible implementations.
type UnimplementedUtilityServer struct {
}

func (UnimplementedUtilityServer) CalculateFee(context.Context, *CalculateFeeRequest) (*CalculateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFee not implemented")
}

// UnsafeUtilityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilityServer will
// result in compilation errors.
type UnsafeUtilityServer interface {
	mustEmbedUnimplementedUtilityServer()
}

func RegisterUtilityServer(s grpc.ServiceRegistrar, srv UtilityServer) {
	s.RegisterService(&Utility_ServiceDesc, srv)
}

func _Utility_CalculateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServer).CalculateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pactus.Utility/CalculateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServer).CalculateFee(ctx, req.(*CalculateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Utility_ServiceDesc is the grpc.ServiceDesc for Utility service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Utility_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pactus.Utility",
	HandlerType: (*UtilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateFee",
			Handler:    _Utility_CalculateFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utility.proto",
}
